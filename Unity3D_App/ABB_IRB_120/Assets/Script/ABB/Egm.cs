// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

/*
using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
*/

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;

namespace abb.egm {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Egm {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_abb_egm_EgmHeader__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmHeader, global::abb.egm.EgmHeader.Builder> internal__static_abb_egm_EgmHeader__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_abb_egm_EgmCartesian__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmCartesian, global::abb.egm.EgmCartesian.Builder> internal__static_abb_egm_EgmCartesian__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_abb_egm_EgmQuaternion__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmQuaternion, global::abb.egm.EgmQuaternion.Builder> internal__static_abb_egm_EgmQuaternion__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_abb_egm_EgmEuler__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmEuler, global::abb.egm.EgmEuler.Builder> internal__static_abb_egm_EgmEuler__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_abb_egm_EgmClock__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmClock, global::abb.egm.EgmClock.Builder> internal__static_abb_egm_EgmClock__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_abb_egm_EgmPose__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmPose, global::abb.egm.EgmPose.Builder> internal__static_abb_egm_EgmPose__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_abb_egm_EgmCartesianSpeed__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmCartesianSpeed, global::abb.egm.EgmCartesianSpeed.Builder> internal__static_abb_egm_EgmCartesianSpeed__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_abb_egm_EgmJoints__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmJoints, global::abb.egm.EgmJoints.Builder> internal__static_abb_egm_EgmJoints__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_abb_egm_EgmExternalJoints__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmExternalJoints, global::abb.egm.EgmExternalJoints.Builder> internal__static_abb_egm_EgmExternalJoints__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_abb_egm_EgmPlanned__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmPlanned, global::abb.egm.EgmPlanned.Builder> internal__static_abb_egm_EgmPlanned__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_abb_egm_EgmSpeedRef__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmSpeedRef, global::abb.egm.EgmSpeedRef.Builder> internal__static_abb_egm_EgmSpeedRef__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_abb_egm_EgmPathCorr__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmPathCorr, global::abb.egm.EgmPathCorr.Builder> internal__static_abb_egm_EgmPathCorr__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_abb_egm_EgmFeedBack__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmFeedBack, global::abb.egm.EgmFeedBack.Builder> internal__static_abb_egm_EgmFeedBack__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_abb_egm_EgmMotorState__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmMotorState, global::abb.egm.EgmMotorState.Builder> internal__static_abb_egm_EgmMotorState__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_abb_egm_EgmMCIState__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmMCIState, global::abb.egm.EgmMCIState.Builder> internal__static_abb_egm_EgmMCIState__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_abb_egm_EgmRapidCtrlExecState__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmRapidCtrlExecState, global::abb.egm.EgmRapidCtrlExecState.Builder> internal__static_abb_egm_EgmRapidCtrlExecState__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_abb_egm_EgmTestSignals__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmTestSignals, global::abb.egm.EgmTestSignals.Builder> internal__static_abb_egm_EgmTestSignals__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_abb_egm_EgmMeasuredForce__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmMeasuredForce, global::abb.egm.EgmMeasuredForce.Builder> internal__static_abb_egm_EgmMeasuredForce__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_abb_egm_EgmRobot__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmRobot, global::abb.egm.EgmRobot.Builder> internal__static_abb_egm_EgmRobot__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_abb_egm_EgmSensor__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmSensor, global::abb.egm.EgmSensor.Builder> internal__static_abb_egm_EgmSensor__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_abb_egm_EgmSensorPathCorr__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmSensorPathCorr, global::abb.egm.EgmSensorPathCorr.Builder> internal__static_abb_egm_EgmSensorPathCorr__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Egm() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgllZ20ucHJvdG8SB2FiYi5lZ20i6wEKCUVnbUhlYWRlchINCgVzZXFubxgB", 
            "IAEoDRIKCgJ0bRgCIAEoDRJACgVtdHlwZRgDIAEoDjIeLmFiYi5lZ20uRWdt", 
            "SGVhZGVyLk1lc3NhZ2VUeXBlOhFNU0dUWVBFX1VOREVGSU5FRCKAAQoLTWVz", 
            "c2FnZVR5cGUSFQoRTVNHVFlQRV9VTkRFRklORUQQABITCg9NU0dUWVBFX0NP", 
            "TU1BTkQQARIQCgxNU0dUWVBFX0RBVEEQAhIWChJNU0dUWVBFX0NPUlJFQ1RJ", 
            "T04QAxIbChdNU0dUWVBFX1BBVEhfQ09SUkVDVElPThAEIi8KDEVnbUNhcnRl", 
            "c2lhbhIJCgF4GAEgAigBEgkKAXkYAiACKAESCQoBehgDIAIoASI/Cg1FZ21R", 
            "dWF0ZXJuaW9uEgoKAnUwGAEgAigBEgoKAnUxGAIgAigBEgoKAnUyGAMgAigB", 
            "EgoKAnUzGAQgAigBIisKCEVnbUV1bGVyEgkKAXgYASACKAESCQoBeRgCIAIo", 
            "ARIJCgF6GAMgAigBIiUKCEVnbUNsb2NrEgsKA3NlYxgBIAIoBBIMCgR1c2Vj", 
            "GAIgAigEIncKB0VnbVBvc2USIgoDcG9zGAEgASgLMhUuYWJiLmVnbS5FZ21D", 
            "YXJ0ZXNpYW4SJgoGb3JpZW50GAIgASgLMhYuYWJiLmVnbS5FZ21RdWF0ZXJu", 
            "aW9uEiAKBWV1bGVyGAMgASgLMhEuYWJiLmVnbS5FZ21FdWxlciIiChFFZ21D", 
            "YXJ0ZXNpYW5TcGVlZBINCgV2YWx1ZRgBIAMoASIbCglFZ21Kb2ludHMSDgoG", 
            "am9pbnRzGAEgAygBIiMKEUVnbUV4dGVybmFsSm9pbnRzEg4KBmpvaW50cxgB", 
            "IAMoASKiAQoKRWdtUGxhbm5lZBIiCgZqb2ludHMYASABKAsyEi5hYmIuZWdt", 
            "LkVnbUpvaW50cxIjCgljYXJ0ZXNpYW4YAiABKAsyEC5hYmIuZWdtLkVnbVBv", 
            "c2USKgoOZXh0ZXJuYWxKb2ludHMYAyABKAsyEi5hYmIuZWdtLkVnbUpvaW50", 
            "cxIfCgR0aW1lGAQgASgLMhEuYWJiLmVnbS5FZ21DbG9jayKNAQoLRWdtU3Bl", 
            "ZWRSZWYSIgoGam9pbnRzGAEgASgLMhIuYWJiLmVnbS5FZ21Kb2ludHMSLgoK", 
            "Y2FydGVzaWFucxgCIAEoCzIaLmFiYi5lZ20uRWdtQ2FydGVzaWFuU3BlZWQS", 
            "KgoOZXh0ZXJuYWxKb2ludHMYAyABKAsyEi5hYmIuZWdtLkVnbUpvaW50cyI+", 
            "CgtFZ21QYXRoQ29ychIiCgNwb3MYASACKAsyFS5hYmIuZWdtLkVnbUNhcnRl", 
            "c2lhbhILCgNhZ2UYAiACKA0iowEKC0VnbUZlZWRCYWNrEiIKBmpvaW50cxgB", 
            "IAEoCzISLmFiYi5lZ20uRWdtSm9pbnRzEiMKCWNhcnRlc2lhbhgCIAEoCzIQ", 
            "LmFiYi5lZ20uRWdtUG9zZRIqCg5leHRlcm5hbEpvaW50cxgDIAEoCzISLmFi", 
            "Yi5lZ20uRWdtSm9pbnRzEh8KBHRpbWUYBCABKAsyES5hYmIuZWdtLkVnbUNs", 
            "b2NrIowBCg1FZ21Nb3RvclN0YXRlEjQKBXN0YXRlGAEgAigOMiUuYWJiLmVn", 
            "bS5FZ21Nb3RvclN0YXRlLk1vdG9yU3RhdGVUeXBlIkUKDk1vdG9yU3RhdGVU", 
            "eXBlEhQKEE1PVE9SU19VTkRFRklORUQQABINCglNT1RPUlNfT04QARIOCgpN", 
            "T1RPUlNfT0ZGEAIiogEKC0VnbU1DSVN0YXRlEj8KBXN0YXRlGAEgAigOMiEu", 
            "YWJiLmVnbS5FZ21NQ0lTdGF0ZS5NQ0lTdGF0ZVR5cGU6DU1DSV9VTkRFRklO", 
            "RUQiUgoMTUNJU3RhdGVUeXBlEhEKDU1DSV9VTkRFRklORUQQABINCglNQ0lf", 
            "RVJST1IQARIPCgtNQ0lfU1RPUFBFRBACEg8KC01DSV9SVU5OSU5HEAMiwwEK", 
            "FUVnbVJhcGlkQ3RybEV4ZWNTdGF0ZRJVCgVzdGF0ZRgBIAIoDjI1LmFiYi5l", 
            "Z20uRWdtUmFwaWRDdHJsRXhlY1N0YXRlLlJhcGlkQ3RybEV4ZWNTdGF0ZVR5", 
            "cGU6D1JBUElEX1VOREVGSU5FRCJTChZSYXBpZEN0cmxFeGVjU3RhdGVUeXBl", 
            "EhMKD1JBUElEX1VOREVGSU5FRBAAEhEKDVJBUElEX1NUT1BQRUQQARIRCg1S", 
            "QVBJRF9SVU5OSU5HEAIiIQoORWdtVGVzdFNpZ25hbHMSDwoHc2lnbmFscxgB", 
            "IAMoASIhChBFZ21NZWFzdXJlZEZvcmNlEg0KBWZvcmNlGAEgAygBIoMDCghF", 
            "Z21Sb2JvdBIiCgZoZWFkZXIYASABKAsyEi5hYmIuZWdtLkVnbUhlYWRlchIm", 
            "CghmZWVkQmFjaxgCIAEoCzIULmFiYi5lZ20uRWdtRmVlZEJhY2sSJAoHcGxh", 
            "bm5lZBgDIAEoCzITLmFiYi5lZ20uRWdtUGxhbm5lZBIqCgptb3RvclN0YXRl", 
            "GAQgASgLMhYuYWJiLmVnbS5FZ21Nb3RvclN0YXRlEiYKCG1jaVN0YXRlGAUg", 
            "ASgLMhQuYWJiLmVnbS5FZ21NQ0lTdGF0ZRIZChFtY2lDb252ZXJnZW5jZU1l", 
            "dBgGIAEoCBIsCgt0ZXN0U2lnbmFscxgHIAEoCzIXLmFiYi5lZ20uRWdtVGVz", 
            "dFNpZ25hbHMSNgoOcmFwaWRFeGVjU3RhdGUYCCABKAsyHi5hYmIuZWdtLkVn", 
            "bVJhcGlkQ3RybEV4ZWNTdGF0ZRIwCg1tZWFzdXJlZEZvcmNlGAkgASgLMhku", 
            "YWJiLmVnbS5FZ21NZWFzdXJlZEZvcmNlIn0KCUVnbVNlbnNvchIiCgZoZWFk", 
            "ZXIYASABKAsyEi5hYmIuZWdtLkVnbUhlYWRlchIkCgdwbGFubmVkGAIgASgL", 
            "MhMuYWJiLmVnbS5FZ21QbGFubmVkEiYKCHNwZWVkUmVmGAMgASgLMhQuYWJi", 
            "LmVnbS5FZ21TcGVlZFJlZiJfChFFZ21TZW5zb3JQYXRoQ29ychIiCgZoZWFk", 
            "ZXIYASABKAsyEi5hYmIuZWdtLkVnbUhlYWRlchImCghwYXRoQ29ychgCIAEo", 
          "CzIULmFiYi5lZ20uRWdtUGF0aENvcnI="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_abb_egm_EgmHeader__Descriptor = Descriptor.MessageTypes[0];
        internal__static_abb_egm_EgmHeader__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmHeader, global::abb.egm.EgmHeader.Builder>(internal__static_abb_egm_EgmHeader__Descriptor,
                new string[] { "Seqno", "Tm", "Mtype", });
        internal__static_abb_egm_EgmCartesian__Descriptor = Descriptor.MessageTypes[1];
        internal__static_abb_egm_EgmCartesian__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmCartesian, global::abb.egm.EgmCartesian.Builder>(internal__static_abb_egm_EgmCartesian__Descriptor,
                new string[] { "X", "Y", "Z", });
        internal__static_abb_egm_EgmQuaternion__Descriptor = Descriptor.MessageTypes[2];
        internal__static_abb_egm_EgmQuaternion__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmQuaternion, global::abb.egm.EgmQuaternion.Builder>(internal__static_abb_egm_EgmQuaternion__Descriptor,
                new string[] { "U0", "U1", "U2", "U3", });
        internal__static_abb_egm_EgmEuler__Descriptor = Descriptor.MessageTypes[3];
        internal__static_abb_egm_EgmEuler__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmEuler, global::abb.egm.EgmEuler.Builder>(internal__static_abb_egm_EgmEuler__Descriptor,
                new string[] { "X", "Y", "Z", });
        internal__static_abb_egm_EgmClock__Descriptor = Descriptor.MessageTypes[4];
        internal__static_abb_egm_EgmClock__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmClock, global::abb.egm.EgmClock.Builder>(internal__static_abb_egm_EgmClock__Descriptor,
                new string[] { "Sec", "Usec", });
        internal__static_abb_egm_EgmPose__Descriptor = Descriptor.MessageTypes[5];
        internal__static_abb_egm_EgmPose__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmPose, global::abb.egm.EgmPose.Builder>(internal__static_abb_egm_EgmPose__Descriptor,
                new string[] { "Pos", "Orient", "Euler", });
        internal__static_abb_egm_EgmCartesianSpeed__Descriptor = Descriptor.MessageTypes[6];
        internal__static_abb_egm_EgmCartesianSpeed__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmCartesianSpeed, global::abb.egm.EgmCartesianSpeed.Builder>(internal__static_abb_egm_EgmCartesianSpeed__Descriptor,
                new string[] { "Value", });
        internal__static_abb_egm_EgmJoints__Descriptor = Descriptor.MessageTypes[7];
        internal__static_abb_egm_EgmJoints__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmJoints, global::abb.egm.EgmJoints.Builder>(internal__static_abb_egm_EgmJoints__Descriptor,
                new string[] { "Joints", });
        internal__static_abb_egm_EgmExternalJoints__Descriptor = Descriptor.MessageTypes[8];
        internal__static_abb_egm_EgmExternalJoints__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmExternalJoints, global::abb.egm.EgmExternalJoints.Builder>(internal__static_abb_egm_EgmExternalJoints__Descriptor,
                new string[] { "Joints", });
        internal__static_abb_egm_EgmPlanned__Descriptor = Descriptor.MessageTypes[9];
        internal__static_abb_egm_EgmPlanned__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmPlanned, global::abb.egm.EgmPlanned.Builder>(internal__static_abb_egm_EgmPlanned__Descriptor,
                new string[] { "Joints", "Cartesian", "ExternalJoints", "Time", });
        internal__static_abb_egm_EgmSpeedRef__Descriptor = Descriptor.MessageTypes[10];
        internal__static_abb_egm_EgmSpeedRef__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmSpeedRef, global::abb.egm.EgmSpeedRef.Builder>(internal__static_abb_egm_EgmSpeedRef__Descriptor,
                new string[] { "Joints", "Cartesians", "ExternalJoints", });
        internal__static_abb_egm_EgmPathCorr__Descriptor = Descriptor.MessageTypes[11];
        internal__static_abb_egm_EgmPathCorr__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmPathCorr, global::abb.egm.EgmPathCorr.Builder>(internal__static_abb_egm_EgmPathCorr__Descriptor,
                new string[] { "Pos", "Age", });
        internal__static_abb_egm_EgmFeedBack__Descriptor = Descriptor.MessageTypes[12];
        internal__static_abb_egm_EgmFeedBack__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmFeedBack, global::abb.egm.EgmFeedBack.Builder>(internal__static_abb_egm_EgmFeedBack__Descriptor,
                new string[] { "Joints", "Cartesian", "ExternalJoints", "Time", });
        internal__static_abb_egm_EgmMotorState__Descriptor = Descriptor.MessageTypes[13];
        internal__static_abb_egm_EgmMotorState__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmMotorState, global::abb.egm.EgmMotorState.Builder>(internal__static_abb_egm_EgmMotorState__Descriptor,
                new string[] { "State", });
        internal__static_abb_egm_EgmMCIState__Descriptor = Descriptor.MessageTypes[14];
        internal__static_abb_egm_EgmMCIState__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmMCIState, global::abb.egm.EgmMCIState.Builder>(internal__static_abb_egm_EgmMCIState__Descriptor,
                new string[] { "State", });
        internal__static_abb_egm_EgmRapidCtrlExecState__Descriptor = Descriptor.MessageTypes[15];
        internal__static_abb_egm_EgmRapidCtrlExecState__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmRapidCtrlExecState, global::abb.egm.EgmRapidCtrlExecState.Builder>(internal__static_abb_egm_EgmRapidCtrlExecState__Descriptor,
                new string[] { "State", });
        internal__static_abb_egm_EgmTestSignals__Descriptor = Descriptor.MessageTypes[16];
        internal__static_abb_egm_EgmTestSignals__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmTestSignals, global::abb.egm.EgmTestSignals.Builder>(internal__static_abb_egm_EgmTestSignals__Descriptor,
                new string[] { "Signals", });
        internal__static_abb_egm_EgmMeasuredForce__Descriptor = Descriptor.MessageTypes[17];
        internal__static_abb_egm_EgmMeasuredForce__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmMeasuredForce, global::abb.egm.EgmMeasuredForce.Builder>(internal__static_abb_egm_EgmMeasuredForce__Descriptor,
                new string[] { "Force", });
        internal__static_abb_egm_EgmRobot__Descriptor = Descriptor.MessageTypes[18];
        internal__static_abb_egm_EgmRobot__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmRobot, global::abb.egm.EgmRobot.Builder>(internal__static_abb_egm_EgmRobot__Descriptor,
                new string[] { "Header", "FeedBack", "Planned", "MotorState", "MciState", "MciConvergenceMet", "TestSignals", "RapidExecState", "MeasuredForce", });
        internal__static_abb_egm_EgmSensor__Descriptor = Descriptor.MessageTypes[19];
        internal__static_abb_egm_EgmSensor__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmSensor, global::abb.egm.EgmSensor.Builder>(internal__static_abb_egm_EgmSensor__Descriptor,
                new string[] { "Header", "Planned", "SpeedRef", });
        internal__static_abb_egm_EgmSensorPathCorr__Descriptor = Descriptor.MessageTypes[20];
        internal__static_abb_egm_EgmSensorPathCorr__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::abb.egm.EgmSensorPathCorr, global::abb.egm.EgmSensorPathCorr.Builder>(internal__static_abb_egm_EgmSensorPathCorr__Descriptor,
                new string[] { "Header", "PathCorr", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EgmHeader : pb::GeneratedMessage<EgmHeader, EgmHeader.Builder> {
    private EgmHeader() { }
    private static readonly EgmHeader defaultInstance = new EgmHeader().MakeReadOnly();
    private static readonly string[] _egmHeaderFieldNames = new string[] { "mtype", "seqno", "tm" };
    private static readonly uint[] _egmHeaderFieldTags = new uint[] { 24, 8, 16 };
    public static EgmHeader DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EgmHeader DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EgmHeader ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmHeader__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EgmHeader, EgmHeader.Builder> InternalFieldAccessors {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmHeader__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum MessageType {
        MSGTYPE_UNDEFINED = 0,
        MSGTYPE_COMMAND = 1,
        MSGTYPE_DATA = 2,
        MSGTYPE_CORRECTION = 3,
        MSGTYPE_PATH_CORRECTION = 4,
      }
      
    }
    #endregion
    
    public const int SeqnoFieldNumber = 1;
    private bool hasSeqno;
    private uint seqno_;
    public bool HasSeqno {
      get { return hasSeqno; }
    }
    [global::System.CLSCompliant(false)]
    public uint Seqno {
      get { return seqno_; }
    }
    
    public const int TmFieldNumber = 2;
    private bool hasTm;
    private uint tm_;
    public bool HasTm {
      get { return hasTm; }
    }
    [global::System.CLSCompliant(false)]
    public uint Tm {
      get { return tm_; }
    }
    
    public const int MtypeFieldNumber = 3;
    private bool hasMtype;
    private global::abb.egm.EgmHeader.Types.MessageType mtype_ = global::abb.egm.EgmHeader.Types.MessageType.MSGTYPE_UNDEFINED;
    public bool HasMtype {
      get { return hasMtype; }
    }
    public global::abb.egm.EgmHeader.Types.MessageType Mtype {
      get { return mtype_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _egmHeaderFieldNames;
      if (hasSeqno) {
        output.WriteUInt32(1, field_names[1], Seqno);
      }
      if (hasTm) {
        output.WriteUInt32(2, field_names[2], Tm);
      }
      if (hasMtype) {
        output.WriteEnum(3, field_names[0], (int) Mtype, Mtype);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSeqno) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Seqno);
      }
      if (hasTm) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Tm);
      }
      if (hasMtype) {
        size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Mtype);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static EgmHeader ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmHeader ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmHeader ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmHeader ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmHeader ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmHeader ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EgmHeader ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EgmHeader ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EgmHeader ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmHeader ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EgmHeader MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EgmHeader prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EgmHeader, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EgmHeader cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EgmHeader result;
      
      private EgmHeader PrepareBuilder() {
        if (resultIsReadOnly) {
          EgmHeader original = result;
          result = new EgmHeader();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EgmHeader MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::abb.egm.EgmHeader.Descriptor; }
      }
      
      public override EgmHeader DefaultInstanceForType {
        get { return global::abb.egm.EgmHeader.DefaultInstance; }
      }
      
      public override EgmHeader BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EgmHeader) {
          return MergeFrom((EgmHeader) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EgmHeader other) {
        if (other == global::abb.egm.EgmHeader.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSeqno) {
          Seqno = other.Seqno;
        }
        if (other.HasTm) {
          Tm = other.Tm;
        }
        if (other.HasMtype) {
          Mtype = other.Mtype;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_egmHeaderFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _egmHeaderFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSeqno = input.ReadUInt32(ref result.seqno_);
              break;
            }
            case 16: {
              result.hasTm = input.ReadUInt32(ref result.tm_);
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.mtype_, out unknown)) {
                result.hasMtype = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSeqno {
        get { return result.hasSeqno; }
      }
      [global::System.CLSCompliant(false)]
      public uint Seqno {
        get { return result.Seqno; }
        set { SetSeqno(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSeqno(uint value) {
        PrepareBuilder();
        result.hasSeqno = true;
        result.seqno_ = value;
        return this;
      }
      public Builder ClearSeqno() {
        PrepareBuilder();
        result.hasSeqno = false;
        result.seqno_ = 0;
        return this;
      }
      
      public bool HasTm {
        get { return result.hasTm; }
      }
      [global::System.CLSCompliant(false)]
      public uint Tm {
        get { return result.Tm; }
        set { SetTm(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTm(uint value) {
        PrepareBuilder();
        result.hasTm = true;
        result.tm_ = value;
        return this;
      }
      public Builder ClearTm() {
        PrepareBuilder();
        result.hasTm = false;
        result.tm_ = 0;
        return this;
      }
      
      public bool HasMtype {
       get { return result.hasMtype; }
      }
      public global::abb.egm.EgmHeader.Types.MessageType Mtype {
        get { return result.Mtype; }
        set { SetMtype(value); }
      }
      public Builder SetMtype(global::abb.egm.EgmHeader.Types.MessageType value) {
        PrepareBuilder();
        result.hasMtype = true;
        result.mtype_ = value;
        return this;
      }
      public Builder ClearMtype() {
        PrepareBuilder();
        result.hasMtype = false;
        result.mtype_ = global::abb.egm.EgmHeader.Types.MessageType.MSGTYPE_UNDEFINED;
        return this;
      }
    }
    static EgmHeader() {
      object.ReferenceEquals(global::abb.egm.Egm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EgmCartesian : pb::GeneratedMessage<EgmCartesian, EgmCartesian.Builder> {
    private EgmCartesian() { }
    private static readonly EgmCartesian defaultInstance = new EgmCartesian().MakeReadOnly();
    private static readonly string[] _egmCartesianFieldNames = new string[] { "x", "y", "z" };
    private static readonly uint[] _egmCartesianFieldTags = new uint[] { 9, 17, 25 };
    public static EgmCartesian DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EgmCartesian DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EgmCartesian ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmCartesian__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EgmCartesian, EgmCartesian.Builder> InternalFieldAccessors {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmCartesian__FieldAccessorTable; }
    }
    
    public const int XFieldNumber = 1;
    private bool hasX;
    private double x_;
    public bool HasX {
      get { return hasX; }
    }
    public double X {
      get { return x_; }
    }
    
    public const int YFieldNumber = 2;
    private bool hasY;
    private double y_;
    public bool HasY {
      get { return hasY; }
    }
    public double Y {
      get { return y_; }
    }
    
    public const int ZFieldNumber = 3;
    private bool hasZ;
    private double z_;
    public bool HasZ {
      get { return hasZ; }
    }
    public double Z {
      get { return z_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasX) return false;
        if (!hasY) return false;
        if (!hasZ) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _egmCartesianFieldNames;
      if (hasX) {
        output.WriteDouble(1, field_names[0], X);
      }
      if (hasY) {
        output.WriteDouble(2, field_names[1], Y);
      }
      if (hasZ) {
        output.WriteDouble(3, field_names[2], Z);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasX) {
        size += pb::CodedOutputStream.ComputeDoubleSize(1, X);
      }
      if (hasY) {
        size += pb::CodedOutputStream.ComputeDoubleSize(2, Y);
      }
      if (hasZ) {
        size += pb::CodedOutputStream.ComputeDoubleSize(3, Z);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static EgmCartesian ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmCartesian ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmCartesian ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmCartesian ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmCartesian ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmCartesian ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EgmCartesian ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EgmCartesian ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EgmCartesian ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmCartesian ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EgmCartesian MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EgmCartesian prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EgmCartesian, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EgmCartesian cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EgmCartesian result;
      
      private EgmCartesian PrepareBuilder() {
        if (resultIsReadOnly) {
          EgmCartesian original = result;
          result = new EgmCartesian();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EgmCartesian MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::abb.egm.EgmCartesian.Descriptor; }
      }
      
      public override EgmCartesian DefaultInstanceForType {
        get { return global::abb.egm.EgmCartesian.DefaultInstance; }
      }
      
      public override EgmCartesian BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EgmCartesian) {
          return MergeFrom((EgmCartesian) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EgmCartesian other) {
        if (other == global::abb.egm.EgmCartesian.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        if (other.HasZ) {
          Z = other.Z;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_egmCartesianFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _egmCartesianFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 9: {
              result.hasX = input.ReadDouble(ref result.x_);
              break;
            }
            case 17: {
              result.hasY = input.ReadDouble(ref result.y_);
              break;
            }
            case 25: {
              result.hasZ = input.ReadDouble(ref result.z_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasX {
        get { return result.hasX; }
      }
      public double X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(double value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0D;
        return this;
      }
      
      public bool HasY {
        get { return result.hasY; }
      }
      public double Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      public Builder SetY(double value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0D;
        return this;
      }
      
      public bool HasZ {
        get { return result.hasZ; }
      }
      public double Z {
        get { return result.Z; }
        set { SetZ(value); }
      }
      public Builder SetZ(double value) {
        PrepareBuilder();
        result.hasZ = true;
        result.z_ = value;
        return this;
      }
      public Builder ClearZ() {
        PrepareBuilder();
        result.hasZ = false;
        result.z_ = 0D;
        return this;
      }
    }
    static EgmCartesian() {
      object.ReferenceEquals(global::abb.egm.Egm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EgmQuaternion : pb::GeneratedMessage<EgmQuaternion, EgmQuaternion.Builder> {
    private EgmQuaternion() { }
    private static readonly EgmQuaternion defaultInstance = new EgmQuaternion().MakeReadOnly();
    private static readonly string[] _egmQuaternionFieldNames = new string[] { "u0", "u1", "u2", "u3" };
    private static readonly uint[] _egmQuaternionFieldTags = new uint[] { 9, 17, 25, 33 };
    public static EgmQuaternion DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EgmQuaternion DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EgmQuaternion ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmQuaternion__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EgmQuaternion, EgmQuaternion.Builder> InternalFieldAccessors {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmQuaternion__FieldAccessorTable; }
    }
    
    public const int U0FieldNumber = 1;
    private bool hasU0;
    private double u0_;
    public bool HasU0 {
      get { return hasU0; }
    }
    public double U0 {
      get { return u0_; }
    }
    
    public const int U1FieldNumber = 2;
    private bool hasU1;
    private double u1_;
    public bool HasU1 {
      get { return hasU1; }
    }
    public double U1 {
      get { return u1_; }
    }
    
    public const int U2FieldNumber = 3;
    private bool hasU2;
    private double u2_;
    public bool HasU2 {
      get { return hasU2; }
    }
    public double U2 {
      get { return u2_; }
    }
    
    public const int U3FieldNumber = 4;
    private bool hasU3;
    private double u3_;
    public bool HasU3 {
      get { return hasU3; }
    }
    public double U3 {
      get { return u3_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasU0) return false;
        if (!hasU1) return false;
        if (!hasU2) return false;
        if (!hasU3) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _egmQuaternionFieldNames;
      if (hasU0) {
        output.WriteDouble(1, field_names[0], U0);
      }
      if (hasU1) {
        output.WriteDouble(2, field_names[1], U1);
      }
      if (hasU2) {
        output.WriteDouble(3, field_names[2], U2);
      }
      if (hasU3) {
        output.WriteDouble(4, field_names[3], U3);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasU0) {
        size += pb::CodedOutputStream.ComputeDoubleSize(1, U0);
      }
      if (hasU1) {
        size += pb::CodedOutputStream.ComputeDoubleSize(2, U1);
      }
      if (hasU2) {
        size += pb::CodedOutputStream.ComputeDoubleSize(3, U2);
      }
      if (hasU3) {
        size += pb::CodedOutputStream.ComputeDoubleSize(4, U3);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static EgmQuaternion ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmQuaternion ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmQuaternion ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmQuaternion ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmQuaternion ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmQuaternion ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EgmQuaternion ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EgmQuaternion ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EgmQuaternion ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmQuaternion ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EgmQuaternion MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EgmQuaternion prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EgmQuaternion, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EgmQuaternion cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EgmQuaternion result;
      
      private EgmQuaternion PrepareBuilder() {
        if (resultIsReadOnly) {
          EgmQuaternion original = result;
          result = new EgmQuaternion();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EgmQuaternion MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::abb.egm.EgmQuaternion.Descriptor; }
      }
      
      public override EgmQuaternion DefaultInstanceForType {
        get { return global::abb.egm.EgmQuaternion.DefaultInstance; }
      }
      
      public override EgmQuaternion BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EgmQuaternion) {
          return MergeFrom((EgmQuaternion) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EgmQuaternion other) {
        if (other == global::abb.egm.EgmQuaternion.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasU0) {
          U0 = other.U0;
        }
        if (other.HasU1) {
          U1 = other.U1;
        }
        if (other.HasU2) {
          U2 = other.U2;
        }
        if (other.HasU3) {
          U3 = other.U3;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_egmQuaternionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _egmQuaternionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 9: {
              result.hasU0 = input.ReadDouble(ref result.u0_);
              break;
            }
            case 17: {
              result.hasU1 = input.ReadDouble(ref result.u1_);
              break;
            }
            case 25: {
              result.hasU2 = input.ReadDouble(ref result.u2_);
              break;
            }
            case 33: {
              result.hasU3 = input.ReadDouble(ref result.u3_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasU0 {
        get { return result.hasU0; }
      }
      public double U0 {
        get { return result.U0; }
        set { SetU0(value); }
      }
      public Builder SetU0(double value) {
        PrepareBuilder();
        result.hasU0 = true;
        result.u0_ = value;
        return this;
      }
      public Builder ClearU0() {
        PrepareBuilder();
        result.hasU0 = false;
        result.u0_ = 0D;
        return this;
      }
      
      public bool HasU1 {
        get { return result.hasU1; }
      }
      public double U1 {
        get { return result.U1; }
        set { SetU1(value); }
      }
      public Builder SetU1(double value) {
        PrepareBuilder();
        result.hasU1 = true;
        result.u1_ = value;
        return this;
      }
      public Builder ClearU1() {
        PrepareBuilder();
        result.hasU1 = false;
        result.u1_ = 0D;
        return this;
      }
      
      public bool HasU2 {
        get { return result.hasU2; }
      }
      public double U2 {
        get { return result.U2; }
        set { SetU2(value); }
      }
      public Builder SetU2(double value) {
        PrepareBuilder();
        result.hasU2 = true;
        result.u2_ = value;
        return this;
      }
      public Builder ClearU2() {
        PrepareBuilder();
        result.hasU2 = false;
        result.u2_ = 0D;
        return this;
      }
      
      public bool HasU3 {
        get { return result.hasU3; }
      }
      public double U3 {
        get { return result.U3; }
        set { SetU3(value); }
      }
      public Builder SetU3(double value) {
        PrepareBuilder();
        result.hasU3 = true;
        result.u3_ = value;
        return this;
      }
      public Builder ClearU3() {
        PrepareBuilder();
        result.hasU3 = false;
        result.u3_ = 0D;
        return this;
      }
    }
    static EgmQuaternion() {
      object.ReferenceEquals(global::abb.egm.Egm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EgmEuler : pb::GeneratedMessage<EgmEuler, EgmEuler.Builder> {
    private EgmEuler() { }
    private static readonly EgmEuler defaultInstance = new EgmEuler().MakeReadOnly();
    private static readonly string[] _egmEulerFieldNames = new string[] { "x", "y", "z" };
    private static readonly uint[] _egmEulerFieldTags = new uint[] { 9, 17, 25 };
    public static EgmEuler DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EgmEuler DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EgmEuler ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmEuler__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EgmEuler, EgmEuler.Builder> InternalFieldAccessors {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmEuler__FieldAccessorTable; }
    }
    
    public const int XFieldNumber = 1;
    private bool hasX;
    private double x_;
    public bool HasX {
      get { return hasX; }
    }
    public double X {
      get { return x_; }
    }
    
    public const int YFieldNumber = 2;
    private bool hasY;
    private double y_;
    public bool HasY {
      get { return hasY; }
    }
    public double Y {
      get { return y_; }
    }
    
    public const int ZFieldNumber = 3;
    private bool hasZ;
    private double z_;
    public bool HasZ {
      get { return hasZ; }
    }
    public double Z {
      get { return z_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasX) return false;
        if (!hasY) return false;
        if (!hasZ) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _egmEulerFieldNames;
      if (hasX) {
        output.WriteDouble(1, field_names[0], X);
      }
      if (hasY) {
        output.WriteDouble(2, field_names[1], Y);
      }
      if (hasZ) {
        output.WriteDouble(3, field_names[2], Z);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasX) {
        size += pb::CodedOutputStream.ComputeDoubleSize(1, X);
      }
      if (hasY) {
        size += pb::CodedOutputStream.ComputeDoubleSize(2, Y);
      }
      if (hasZ) {
        size += pb::CodedOutputStream.ComputeDoubleSize(3, Z);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static EgmEuler ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmEuler ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmEuler ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmEuler ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmEuler ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmEuler ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EgmEuler ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EgmEuler ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EgmEuler ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmEuler ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EgmEuler MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EgmEuler prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EgmEuler, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EgmEuler cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EgmEuler result;
      
      private EgmEuler PrepareBuilder() {
        if (resultIsReadOnly) {
          EgmEuler original = result;
          result = new EgmEuler();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EgmEuler MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::abb.egm.EgmEuler.Descriptor; }
      }
      
      public override EgmEuler DefaultInstanceForType {
        get { return global::abb.egm.EgmEuler.DefaultInstance; }
      }
      
      public override EgmEuler BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EgmEuler) {
          return MergeFrom((EgmEuler) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EgmEuler other) {
        if (other == global::abb.egm.EgmEuler.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        if (other.HasZ) {
          Z = other.Z;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_egmEulerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _egmEulerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 9: {
              result.hasX = input.ReadDouble(ref result.x_);
              break;
            }
            case 17: {
              result.hasY = input.ReadDouble(ref result.y_);
              break;
            }
            case 25: {
              result.hasZ = input.ReadDouble(ref result.z_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasX {
        get { return result.hasX; }
      }
      public double X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(double value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0D;
        return this;
      }
      
      public bool HasY {
        get { return result.hasY; }
      }
      public double Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      public Builder SetY(double value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0D;
        return this;
      }
      
      public bool HasZ {
        get { return result.hasZ; }
      }
      public double Z {
        get { return result.Z; }
        set { SetZ(value); }
      }
      public Builder SetZ(double value) {
        PrepareBuilder();
        result.hasZ = true;
        result.z_ = value;
        return this;
      }
      public Builder ClearZ() {
        PrepareBuilder();
        result.hasZ = false;
        result.z_ = 0D;
        return this;
      }
    }
    static EgmEuler() {
      object.ReferenceEquals(global::abb.egm.Egm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EgmClock : pb::GeneratedMessage<EgmClock, EgmClock.Builder> {
    private EgmClock() { }
    private static readonly EgmClock defaultInstance = new EgmClock().MakeReadOnly();
    private static readonly string[] _egmClockFieldNames = new string[] { "sec", "usec" };
    private static readonly uint[] _egmClockFieldTags = new uint[] { 8, 16 };
    public static EgmClock DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EgmClock DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EgmClock ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmClock__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EgmClock, EgmClock.Builder> InternalFieldAccessors {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmClock__FieldAccessorTable; }
    }
    
    public const int SecFieldNumber = 1;
    private bool hasSec;
    private ulong sec_;
    public bool HasSec {
      get { return hasSec; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Sec {
      get { return sec_; }
    }
    
    public const int UsecFieldNumber = 2;
    private bool hasUsec;
    private ulong usec_;
    public bool HasUsec {
      get { return hasUsec; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Usec {
      get { return usec_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSec) return false;
        if (!hasUsec) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _egmClockFieldNames;
      if (hasSec) {
        output.WriteUInt64(1, field_names[0], Sec);
      }
      if (hasUsec) {
        output.WriteUInt64(2, field_names[1], Usec);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSec) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, Sec);
      }
      if (hasUsec) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, Usec);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static EgmClock ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmClock ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmClock ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmClock ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmClock ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmClock ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EgmClock ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EgmClock ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EgmClock ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmClock ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EgmClock MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EgmClock prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EgmClock, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EgmClock cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EgmClock result;
      
      private EgmClock PrepareBuilder() {
        if (resultIsReadOnly) {
          EgmClock original = result;
          result = new EgmClock();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EgmClock MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::abb.egm.EgmClock.Descriptor; }
      }
      
      public override EgmClock DefaultInstanceForType {
        get { return global::abb.egm.EgmClock.DefaultInstance; }
      }
      
      public override EgmClock BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EgmClock) {
          return MergeFrom((EgmClock) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EgmClock other) {
        if (other == global::abb.egm.EgmClock.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSec) {
          Sec = other.Sec;
        }
        if (other.HasUsec) {
          Usec = other.Usec;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_egmClockFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _egmClockFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSec = input.ReadUInt64(ref result.sec_);
              break;
            }
            case 16: {
              result.hasUsec = input.ReadUInt64(ref result.usec_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSec {
        get { return result.hasSec; }
      }
      [global::System.CLSCompliant(false)]
      public ulong Sec {
        get { return result.Sec; }
        set { SetSec(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSec(ulong value) {
        PrepareBuilder();
        result.hasSec = true;
        result.sec_ = value;
        return this;
      }
      public Builder ClearSec() {
        PrepareBuilder();
        result.hasSec = false;
        result.sec_ = 0UL;
        return this;
      }
      
      public bool HasUsec {
        get { return result.hasUsec; }
      }
      [global::System.CLSCompliant(false)]
      public ulong Usec {
        get { return result.Usec; }
        set { SetUsec(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetUsec(ulong value) {
        PrepareBuilder();
        result.hasUsec = true;
        result.usec_ = value;
        return this;
      }
      public Builder ClearUsec() {
        PrepareBuilder();
        result.hasUsec = false;
        result.usec_ = 0UL;
        return this;
      }
    }
    static EgmClock() {
      object.ReferenceEquals(global::abb.egm.Egm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EgmPose : pb::GeneratedMessage<EgmPose, EgmPose.Builder> {
    private EgmPose() { }
    private static readonly EgmPose defaultInstance = new EgmPose().MakeReadOnly();
    private static readonly string[] _egmPoseFieldNames = new string[] { "euler", "orient", "pos" };
    private static readonly uint[] _egmPoseFieldTags = new uint[] { 26, 18, 10 };
    public static EgmPose DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EgmPose DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EgmPose ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmPose__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EgmPose, EgmPose.Builder> InternalFieldAccessors {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmPose__FieldAccessorTable; }
    }
    
    public const int PosFieldNumber = 1;
    private bool hasPos;
    private global::abb.egm.EgmCartesian pos_;
    public bool HasPos {
      get { return hasPos; }
    }
    public global::abb.egm.EgmCartesian Pos {
      get { return pos_ ?? global::abb.egm.EgmCartesian.DefaultInstance; }
    }
    
    public const int OrientFieldNumber = 2;
    private bool hasOrient;
    private global::abb.egm.EgmQuaternion orient_;
    public bool HasOrient {
      get { return hasOrient; }
    }
    public global::abb.egm.EgmQuaternion Orient {
      get { return orient_ ?? global::abb.egm.EgmQuaternion.DefaultInstance; }
    }
    
    public const int EulerFieldNumber = 3;
    private bool hasEuler;
    private global::abb.egm.EgmEuler euler_;
    public bool HasEuler {
      get { return hasEuler; }
    }
    public global::abb.egm.EgmEuler Euler {
      get { return euler_ ?? global::abb.egm.EgmEuler.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasPos) {
          if (!Pos.IsInitialized) return false;
        }
        if (HasOrient) {
          if (!Orient.IsInitialized) return false;
        }
        if (HasEuler) {
          if (!Euler.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _egmPoseFieldNames;
      if (hasPos) {
        output.WriteMessage(1, field_names[2], Pos);
      }
      if (hasOrient) {
        output.WriteMessage(2, field_names[1], Orient);
      }
      if (hasEuler) {
        output.WriteMessage(3, field_names[0], Euler);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPos) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Pos);
      }
      if (hasOrient) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Orient);
      }
      if (hasEuler) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Euler);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static EgmPose ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmPose ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmPose ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmPose ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmPose ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmPose ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EgmPose ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EgmPose ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EgmPose ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmPose ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EgmPose MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EgmPose prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EgmPose, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EgmPose cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EgmPose result;
      
      private EgmPose PrepareBuilder() {
        if (resultIsReadOnly) {
          EgmPose original = result;
          result = new EgmPose();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EgmPose MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::abb.egm.EgmPose.Descriptor; }
      }
      
      public override EgmPose DefaultInstanceForType {
        get { return global::abb.egm.EgmPose.DefaultInstance; }
      }
      
      public override EgmPose BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EgmPose) {
          return MergeFrom((EgmPose) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EgmPose other) {
        if (other == global::abb.egm.EgmPose.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPos) {
          MergePos(other.Pos);
        }
        if (other.HasOrient) {
          MergeOrient(other.Orient);
        }
        if (other.HasEuler) {
          MergeEuler(other.Euler);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_egmPoseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _egmPoseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::abb.egm.EgmCartesian.Builder subBuilder = global::abb.egm.EgmCartesian.CreateBuilder();
              if (result.hasPos) {
                subBuilder.MergeFrom(Pos);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Pos = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::abb.egm.EgmQuaternion.Builder subBuilder = global::abb.egm.EgmQuaternion.CreateBuilder();
              if (result.hasOrient) {
                subBuilder.MergeFrom(Orient);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Orient = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::abb.egm.EgmEuler.Builder subBuilder = global::abb.egm.EgmEuler.CreateBuilder();
              if (result.hasEuler) {
                subBuilder.MergeFrom(Euler);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Euler = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPos {
       get { return result.hasPos; }
      }
      public global::abb.egm.EgmCartesian Pos {
        get { return result.Pos; }
        set { SetPos(value); }
      }
      public Builder SetPos(global::abb.egm.EgmCartesian value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPos = true;
        result.pos_ = value;
        return this;
      }
      public Builder SetPos(global::abb.egm.EgmCartesian.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPos = true;
        result.pos_ = builderForValue.Build();
        return this;
      }
      public Builder MergePos(global::abb.egm.EgmCartesian value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPos &&
            result.pos_ != global::abb.egm.EgmCartesian.DefaultInstance) {
            result.pos_ = global::abb.egm.EgmCartesian.CreateBuilder(result.pos_).MergeFrom(value).BuildPartial();
        } else {
          result.pos_ = value;
        }
        result.hasPos = true;
        return this;
      }
      public Builder ClearPos() {
        PrepareBuilder();
        result.hasPos = false;
        result.pos_ = null;
        return this;
      }
      
      public bool HasOrient {
       get { return result.hasOrient; }
      }
      public global::abb.egm.EgmQuaternion Orient {
        get { return result.Orient; }
        set { SetOrient(value); }
      }
      public Builder SetOrient(global::abb.egm.EgmQuaternion value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOrient = true;
        result.orient_ = value;
        return this;
      }
      public Builder SetOrient(global::abb.egm.EgmQuaternion.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOrient = true;
        result.orient_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOrient(global::abb.egm.EgmQuaternion value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOrient &&
            result.orient_ != global::abb.egm.EgmQuaternion.DefaultInstance) {
            result.orient_ = global::abb.egm.EgmQuaternion.CreateBuilder(result.orient_).MergeFrom(value).BuildPartial();
        } else {
          result.orient_ = value;
        }
        result.hasOrient = true;
        return this;
      }
      public Builder ClearOrient() {
        PrepareBuilder();
        result.hasOrient = false;
        result.orient_ = null;
        return this;
      }
      
      public bool HasEuler {
       get { return result.hasEuler; }
      }
      public global::abb.egm.EgmEuler Euler {
        get { return result.Euler; }
        set { SetEuler(value); }
      }
      public Builder SetEuler(global::abb.egm.EgmEuler value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEuler = true;
        result.euler_ = value;
        return this;
      }
      public Builder SetEuler(global::abb.egm.EgmEuler.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasEuler = true;
        result.euler_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEuler(global::abb.egm.EgmEuler value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasEuler &&
            result.euler_ != global::abb.egm.EgmEuler.DefaultInstance) {
            result.euler_ = global::abb.egm.EgmEuler.CreateBuilder(result.euler_).MergeFrom(value).BuildPartial();
        } else {
          result.euler_ = value;
        }
        result.hasEuler = true;
        return this;
      }
      public Builder ClearEuler() {
        PrepareBuilder();
        result.hasEuler = false;
        result.euler_ = null;
        return this;
      }
    }
    static EgmPose() {
      object.ReferenceEquals(global::abb.egm.Egm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EgmCartesianSpeed : pb::GeneratedMessage<EgmCartesianSpeed, EgmCartesianSpeed.Builder> {
    private EgmCartesianSpeed() { }
    private static readonly EgmCartesianSpeed defaultInstance = new EgmCartesianSpeed().MakeReadOnly();
    private static readonly string[] _egmCartesianSpeedFieldNames = new string[] { "value" };
    private static readonly uint[] _egmCartesianSpeedFieldTags = new uint[] { 9 };
    public static EgmCartesianSpeed DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EgmCartesianSpeed DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EgmCartesianSpeed ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmCartesianSpeed__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EgmCartesianSpeed, EgmCartesianSpeed.Builder> InternalFieldAccessors {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmCartesianSpeed__FieldAccessorTable; }
    }
    
    public const int ValueFieldNumber = 1;
    private pbc::PopsicleList<double> value_ = new pbc::PopsicleList<double>();
    public scg::IList<double> ValueList {
      get { return pbc::Lists.AsReadOnly(value_); }
    }
    public int ValueCount {
      get { return value_.Count; }
    }
    public double GetValue(int index) {
      return value_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _egmCartesianSpeedFieldNames;
      if (value_.Count > 0) {
        output.WriteDoubleArray(1, field_names[0], value_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      {
        int dataSize = 0;
        dataSize = 8 * value_.Count;
        size += dataSize;
        size += 1 * value_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static EgmCartesianSpeed ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmCartesianSpeed ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmCartesianSpeed ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmCartesianSpeed ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmCartesianSpeed ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmCartesianSpeed ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EgmCartesianSpeed ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EgmCartesianSpeed ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EgmCartesianSpeed ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmCartesianSpeed ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EgmCartesianSpeed MakeReadOnly() {
      value_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EgmCartesianSpeed prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EgmCartesianSpeed, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EgmCartesianSpeed cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EgmCartesianSpeed result;
      
      private EgmCartesianSpeed PrepareBuilder() {
        if (resultIsReadOnly) {
          EgmCartesianSpeed original = result;
          result = new EgmCartesianSpeed();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EgmCartesianSpeed MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::abb.egm.EgmCartesianSpeed.Descriptor; }
      }
      
      public override EgmCartesianSpeed DefaultInstanceForType {
        get { return global::abb.egm.EgmCartesianSpeed.DefaultInstance; }
      }
      
      public override EgmCartesianSpeed BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EgmCartesianSpeed) {
          return MergeFrom((EgmCartesianSpeed) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EgmCartesianSpeed other) {
        if (other == global::abb.egm.EgmCartesianSpeed.DefaultInstance) return this;
        PrepareBuilder();
        if (other.value_.Count != 0) {
          result.value_.Add(other.value_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_egmCartesianSpeedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _egmCartesianSpeedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 9: {
              input.ReadDoubleArray(tag, field_name, result.value_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<double> ValueList {
        get { return PrepareBuilder().value_; }
      }
      public int ValueCount {
        get { return result.ValueCount; }
      }
      public double GetValue(int index) {
        return result.GetValue(index);
      }
      public Builder SetValue(int index, double value) {
        PrepareBuilder();
        result.value_[index] = value;
        return this;
      }
      public Builder AddValue(double value) {
        PrepareBuilder();
        result.value_.Add(value);
        return this;
      }
      public Builder AddRangeValue(scg::IEnumerable<double> values) {
        PrepareBuilder();
        result.value_.Add(values);
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.value_.Clear();
        return this;
      }
    }
    static EgmCartesianSpeed() {
      object.ReferenceEquals(global::abb.egm.Egm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EgmJoints : pb::GeneratedMessage<EgmJoints, EgmJoints.Builder> {
    private EgmJoints() { }
    private static readonly EgmJoints defaultInstance = new EgmJoints().MakeReadOnly();
    private static readonly string[] _egmJointsFieldNames = new string[] { "joints" };
    private static readonly uint[] _egmJointsFieldTags = new uint[] { 9 };
    public static EgmJoints DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EgmJoints DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EgmJoints ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmJoints__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EgmJoints, EgmJoints.Builder> InternalFieldAccessors {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmJoints__FieldAccessorTable; }
    }
    
    public const int JointsFieldNumber = 1;
    private pbc::PopsicleList<double> joints_ = new pbc::PopsicleList<double>();
    public scg::IList<double> JointsList {
      get { return pbc::Lists.AsReadOnly(joints_); }
    }
    public int JointsCount {
      get { return joints_.Count; }
    }
    public double GetJoints(int index) {
      return joints_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _egmJointsFieldNames;
      if (joints_.Count > 0) {
        output.WriteDoubleArray(1, field_names[0], joints_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      {
        int dataSize = 0;
        dataSize = 8 * joints_.Count;
        size += dataSize;
        size += 1 * joints_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static EgmJoints ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmJoints ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmJoints ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmJoints ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmJoints ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmJoints ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EgmJoints ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EgmJoints ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EgmJoints ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmJoints ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EgmJoints MakeReadOnly() {
      joints_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EgmJoints prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EgmJoints, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EgmJoints cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EgmJoints result;
      
      private EgmJoints PrepareBuilder() {
        if (resultIsReadOnly) {
          EgmJoints original = result;
          result = new EgmJoints();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EgmJoints MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::abb.egm.EgmJoints.Descriptor; }
      }
      
      public override EgmJoints DefaultInstanceForType {
        get { return global::abb.egm.EgmJoints.DefaultInstance; }
      }
      
      public override EgmJoints BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EgmJoints) {
          return MergeFrom((EgmJoints) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EgmJoints other) {
        if (other == global::abb.egm.EgmJoints.DefaultInstance) return this;
        PrepareBuilder();
        if (other.joints_.Count != 0) {
          result.joints_.Add(other.joints_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_egmJointsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _egmJointsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 9: {
              input.ReadDoubleArray(tag, field_name, result.joints_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<double> JointsList {
        get { return PrepareBuilder().joints_; }
      }
      public int JointsCount {
        get { return result.JointsCount; }
      }
      public double GetJoints(int index) {
        return result.GetJoints(index);
      }
      public Builder SetJoints(int index, double value) {
        PrepareBuilder();
        result.joints_[index] = value;
        return this;
      }
      public Builder AddJoints(double value) {
        PrepareBuilder();
        result.joints_.Add(value);
        return this;
      }
      public Builder AddRangeJoints(scg::IEnumerable<double> values) {
        PrepareBuilder();
        result.joints_.Add(values);
        return this;
      }
      public Builder ClearJoints() {
        PrepareBuilder();
        result.joints_.Clear();
        return this;
      }
    }
    static EgmJoints() {
      object.ReferenceEquals(global::abb.egm.Egm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EgmExternalJoints : pb::GeneratedMessage<EgmExternalJoints, EgmExternalJoints.Builder> {
    private EgmExternalJoints() { }
    private static readonly EgmExternalJoints defaultInstance = new EgmExternalJoints().MakeReadOnly();
    private static readonly string[] _egmExternalJointsFieldNames = new string[] { "joints" };
    private static readonly uint[] _egmExternalJointsFieldTags = new uint[] { 9 };
    public static EgmExternalJoints DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EgmExternalJoints DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EgmExternalJoints ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmExternalJoints__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EgmExternalJoints, EgmExternalJoints.Builder> InternalFieldAccessors {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmExternalJoints__FieldAccessorTable; }
    }
    
    public const int JointsFieldNumber = 1;
    private pbc::PopsicleList<double> joints_ = new pbc::PopsicleList<double>();
    public scg::IList<double> JointsList {
      get { return pbc::Lists.AsReadOnly(joints_); }
    }
    public int JointsCount {
      get { return joints_.Count; }
    }
    public double GetJoints(int index) {
      return joints_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _egmExternalJointsFieldNames;
      if (joints_.Count > 0) {
        output.WriteDoubleArray(1, field_names[0], joints_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      {
        int dataSize = 0;
        dataSize = 8 * joints_.Count;
        size += dataSize;
        size += 1 * joints_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static EgmExternalJoints ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmExternalJoints ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmExternalJoints ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmExternalJoints ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmExternalJoints ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmExternalJoints ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EgmExternalJoints ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EgmExternalJoints ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EgmExternalJoints ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmExternalJoints ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EgmExternalJoints MakeReadOnly() {
      joints_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EgmExternalJoints prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EgmExternalJoints, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EgmExternalJoints cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EgmExternalJoints result;
      
      private EgmExternalJoints PrepareBuilder() {
        if (resultIsReadOnly) {
          EgmExternalJoints original = result;
          result = new EgmExternalJoints();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EgmExternalJoints MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::abb.egm.EgmExternalJoints.Descriptor; }
      }
      
      public override EgmExternalJoints DefaultInstanceForType {
        get { return global::abb.egm.EgmExternalJoints.DefaultInstance; }
      }
      
      public override EgmExternalJoints BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EgmExternalJoints) {
          return MergeFrom((EgmExternalJoints) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EgmExternalJoints other) {
        if (other == global::abb.egm.EgmExternalJoints.DefaultInstance) return this;
        PrepareBuilder();
        if (other.joints_.Count != 0) {
          result.joints_.Add(other.joints_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_egmExternalJointsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _egmExternalJointsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 9: {
              input.ReadDoubleArray(tag, field_name, result.joints_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<double> JointsList {
        get { return PrepareBuilder().joints_; }
      }
      public int JointsCount {
        get { return result.JointsCount; }
      }
      public double GetJoints(int index) {
        return result.GetJoints(index);
      }
      public Builder SetJoints(int index, double value) {
        PrepareBuilder();
        result.joints_[index] = value;
        return this;
      }
      public Builder AddJoints(double value) {
        PrepareBuilder();
        result.joints_.Add(value);
        return this;
      }
      public Builder AddRangeJoints(scg::IEnumerable<double> values) {
        PrepareBuilder();
        result.joints_.Add(values);
        return this;
      }
      public Builder ClearJoints() {
        PrepareBuilder();
        result.joints_.Clear();
        return this;
      }
    }
    static EgmExternalJoints() {
      object.ReferenceEquals(global::abb.egm.Egm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EgmPlanned : pb::GeneratedMessage<EgmPlanned, EgmPlanned.Builder> {
    private EgmPlanned() { }
    private static readonly EgmPlanned defaultInstance = new EgmPlanned().MakeReadOnly();
    private static readonly string[] _egmPlannedFieldNames = new string[] { "cartesian", "externalJoints", "joints", "time" };
    private static readonly uint[] _egmPlannedFieldTags = new uint[] { 18, 26, 10, 34 };
    public static EgmPlanned DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EgmPlanned DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EgmPlanned ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmPlanned__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EgmPlanned, EgmPlanned.Builder> InternalFieldAccessors {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmPlanned__FieldAccessorTable; }
    }
    
    public const int JointsFieldNumber = 1;
    private bool hasJoints;
    private global::abb.egm.EgmJoints joints_;
    public bool HasJoints {
      get { return hasJoints; }
    }
    public global::abb.egm.EgmJoints Joints {
      get { return joints_ ?? global::abb.egm.EgmJoints.DefaultInstance; }
    }
    
    public const int CartesianFieldNumber = 2;
    private bool hasCartesian;
    private global::abb.egm.EgmPose cartesian_;
    public bool HasCartesian {
      get { return hasCartesian; }
    }
    public global::abb.egm.EgmPose Cartesian {
      get { return cartesian_ ?? global::abb.egm.EgmPose.DefaultInstance; }
    }
    
    public const int ExternalJointsFieldNumber = 3;
    private bool hasExternalJoints;
    private global::abb.egm.EgmJoints externalJoints_;
    public bool HasExternalJoints {
      get { return hasExternalJoints; }
    }
    public global::abb.egm.EgmJoints ExternalJoints {
      get { return externalJoints_ ?? global::abb.egm.EgmJoints.DefaultInstance; }
    }
    
    public const int TimeFieldNumber = 4;
    private bool hasTime;
    private global::abb.egm.EgmClock time_;
    public bool HasTime {
      get { return hasTime; }
    }
    public global::abb.egm.EgmClock Time {
      get { return time_ ?? global::abb.egm.EgmClock.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasCartesian) {
          if (!Cartesian.IsInitialized) return false;
        }
        if (HasTime) {
          if (!Time.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _egmPlannedFieldNames;
      if (hasJoints) {
        output.WriteMessage(1, field_names[2], Joints);
      }
      if (hasCartesian) {
        output.WriteMessage(2, field_names[0], Cartesian);
      }
      if (hasExternalJoints) {
        output.WriteMessage(3, field_names[1], ExternalJoints);
      }
      if (hasTime) {
        output.WriteMessage(4, field_names[3], Time);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasJoints) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Joints);
      }
      if (hasCartesian) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Cartesian);
      }
      if (hasExternalJoints) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, ExternalJoints);
      }
      if (hasTime) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, Time);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static EgmPlanned ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmPlanned ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmPlanned ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmPlanned ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmPlanned ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmPlanned ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EgmPlanned ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EgmPlanned ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EgmPlanned ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmPlanned ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EgmPlanned MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EgmPlanned prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EgmPlanned, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EgmPlanned cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EgmPlanned result;
      
      private EgmPlanned PrepareBuilder() {
        if (resultIsReadOnly) {
          EgmPlanned original = result;
          result = new EgmPlanned();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EgmPlanned MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::abb.egm.EgmPlanned.Descriptor; }
      }
      
      public override EgmPlanned DefaultInstanceForType {
        get { return global::abb.egm.EgmPlanned.DefaultInstance; }
      }
      
      public override EgmPlanned BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EgmPlanned) {
          return MergeFrom((EgmPlanned) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EgmPlanned other) {
        if (other == global::abb.egm.EgmPlanned.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasJoints) {
          MergeJoints(other.Joints);
        }
        if (other.HasCartesian) {
          MergeCartesian(other.Cartesian);
        }
        if (other.HasExternalJoints) {
          MergeExternalJoints(other.ExternalJoints);
        }
        if (other.HasTime) {
          MergeTime(other.Time);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_egmPlannedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _egmPlannedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::abb.egm.EgmJoints.Builder subBuilder = global::abb.egm.EgmJoints.CreateBuilder();
              if (result.hasJoints) {
                subBuilder.MergeFrom(Joints);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Joints = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::abb.egm.EgmPose.Builder subBuilder = global::abb.egm.EgmPose.CreateBuilder();
              if (result.hasCartesian) {
                subBuilder.MergeFrom(Cartesian);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Cartesian = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::abb.egm.EgmJoints.Builder subBuilder = global::abb.egm.EgmJoints.CreateBuilder();
              if (result.hasExternalJoints) {
                subBuilder.MergeFrom(ExternalJoints);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ExternalJoints = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::abb.egm.EgmClock.Builder subBuilder = global::abb.egm.EgmClock.CreateBuilder();
              if (result.hasTime) {
                subBuilder.MergeFrom(Time);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Time = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasJoints {
       get { return result.hasJoints; }
      }
      public global::abb.egm.EgmJoints Joints {
        get { return result.Joints; }
        set { SetJoints(value); }
      }
      public Builder SetJoints(global::abb.egm.EgmJoints value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasJoints = true;
        result.joints_ = value;
        return this;
      }
      public Builder SetJoints(global::abb.egm.EgmJoints.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasJoints = true;
        result.joints_ = builderForValue.Build();
        return this;
      }
      public Builder MergeJoints(global::abb.egm.EgmJoints value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasJoints &&
            result.joints_ != global::abb.egm.EgmJoints.DefaultInstance) {
            result.joints_ = global::abb.egm.EgmJoints.CreateBuilder(result.joints_).MergeFrom(value).BuildPartial();
        } else {
          result.joints_ = value;
        }
        result.hasJoints = true;
        return this;
      }
      public Builder ClearJoints() {
        PrepareBuilder();
        result.hasJoints = false;
        result.joints_ = null;
        return this;
      }
      
      public bool HasCartesian {
       get { return result.hasCartesian; }
      }
      public global::abb.egm.EgmPose Cartesian {
        get { return result.Cartesian; }
        set { SetCartesian(value); }
      }
      public Builder SetCartesian(global::abb.egm.EgmPose value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCartesian = true;
        result.cartesian_ = value;
        return this;
      }
      public Builder SetCartesian(global::abb.egm.EgmPose.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCartesian = true;
        result.cartesian_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCartesian(global::abb.egm.EgmPose value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCartesian &&
            result.cartesian_ != global::abb.egm.EgmPose.DefaultInstance) {
            result.cartesian_ = global::abb.egm.EgmPose.CreateBuilder(result.cartesian_).MergeFrom(value).BuildPartial();
        } else {
          result.cartesian_ = value;
        }
        result.hasCartesian = true;
        return this;
      }
      public Builder ClearCartesian() {
        PrepareBuilder();
        result.hasCartesian = false;
        result.cartesian_ = null;
        return this;
      }
      
      public bool HasExternalJoints {
       get { return result.hasExternalJoints; }
      }
      public global::abb.egm.EgmJoints ExternalJoints {
        get { return result.ExternalJoints; }
        set { SetExternalJoints(value); }
      }
      public Builder SetExternalJoints(global::abb.egm.EgmJoints value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExternalJoints = true;
        result.externalJoints_ = value;
        return this;
      }
      public Builder SetExternalJoints(global::abb.egm.EgmJoints.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasExternalJoints = true;
        result.externalJoints_ = builderForValue.Build();
        return this;
      }
      public Builder MergeExternalJoints(global::abb.egm.EgmJoints value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasExternalJoints &&
            result.externalJoints_ != global::abb.egm.EgmJoints.DefaultInstance) {
            result.externalJoints_ = global::abb.egm.EgmJoints.CreateBuilder(result.externalJoints_).MergeFrom(value).BuildPartial();
        } else {
          result.externalJoints_ = value;
        }
        result.hasExternalJoints = true;
        return this;
      }
      public Builder ClearExternalJoints() {
        PrepareBuilder();
        result.hasExternalJoints = false;
        result.externalJoints_ = null;
        return this;
      }
      
      public bool HasTime {
       get { return result.hasTime; }
      }
      public global::abb.egm.EgmClock Time {
        get { return result.Time; }
        set { SetTime(value); }
      }
      public Builder SetTime(global::abb.egm.EgmClock value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTime = true;
        result.time_ = value;
        return this;
      }
      public Builder SetTime(global::abb.egm.EgmClock.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTime = true;
        result.time_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTime(global::abb.egm.EgmClock value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTime &&
            result.time_ != global::abb.egm.EgmClock.DefaultInstance) {
            result.time_ = global::abb.egm.EgmClock.CreateBuilder(result.time_).MergeFrom(value).BuildPartial();
        } else {
          result.time_ = value;
        }
        result.hasTime = true;
        return this;
      }
      public Builder ClearTime() {
        PrepareBuilder();
        result.hasTime = false;
        result.time_ = null;
        return this;
      }
    }
    static EgmPlanned() {
      object.ReferenceEquals(global::abb.egm.Egm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EgmSpeedRef : pb::GeneratedMessage<EgmSpeedRef, EgmSpeedRef.Builder> {
    private EgmSpeedRef() { }
    private static readonly EgmSpeedRef defaultInstance = new EgmSpeedRef().MakeReadOnly();
    private static readonly string[] _egmSpeedRefFieldNames = new string[] { "cartesians", "externalJoints", "joints" };
    private static readonly uint[] _egmSpeedRefFieldTags = new uint[] { 18, 26, 10 };
    public static EgmSpeedRef DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EgmSpeedRef DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EgmSpeedRef ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmSpeedRef__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EgmSpeedRef, EgmSpeedRef.Builder> InternalFieldAccessors {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmSpeedRef__FieldAccessorTable; }
    }
    
    public const int JointsFieldNumber = 1;
    private bool hasJoints;
    private global::abb.egm.EgmJoints joints_;
    public bool HasJoints {
      get { return hasJoints; }
    }
    public global::abb.egm.EgmJoints Joints {
      get { return joints_ ?? global::abb.egm.EgmJoints.DefaultInstance; }
    }
    
    public const int CartesiansFieldNumber = 2;
    private bool hasCartesians;
    private global::abb.egm.EgmCartesianSpeed cartesians_;
    public bool HasCartesians {
      get { return hasCartesians; }
    }
    public global::abb.egm.EgmCartesianSpeed Cartesians {
      get { return cartesians_ ?? global::abb.egm.EgmCartesianSpeed.DefaultInstance; }
    }
    
    public const int ExternalJointsFieldNumber = 3;
    private bool hasExternalJoints;
    private global::abb.egm.EgmJoints externalJoints_;
    public bool HasExternalJoints {
      get { return hasExternalJoints; }
    }
    public global::abb.egm.EgmJoints ExternalJoints {
      get { return externalJoints_ ?? global::abb.egm.EgmJoints.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _egmSpeedRefFieldNames;
      if (hasJoints) {
        output.WriteMessage(1, field_names[2], Joints);
      }
      if (hasCartesians) {
        output.WriteMessage(2, field_names[0], Cartesians);
      }
      if (hasExternalJoints) {
        output.WriteMessage(3, field_names[1], ExternalJoints);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasJoints) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Joints);
      }
      if (hasCartesians) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Cartesians);
      }
      if (hasExternalJoints) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, ExternalJoints);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static EgmSpeedRef ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmSpeedRef ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmSpeedRef ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmSpeedRef ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmSpeedRef ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmSpeedRef ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EgmSpeedRef ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EgmSpeedRef ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EgmSpeedRef ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmSpeedRef ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EgmSpeedRef MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EgmSpeedRef prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EgmSpeedRef, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EgmSpeedRef cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EgmSpeedRef result;
      
      private EgmSpeedRef PrepareBuilder() {
        if (resultIsReadOnly) {
          EgmSpeedRef original = result;
          result = new EgmSpeedRef();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EgmSpeedRef MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::abb.egm.EgmSpeedRef.Descriptor; }
      }
      
      public override EgmSpeedRef DefaultInstanceForType {
        get { return global::abb.egm.EgmSpeedRef.DefaultInstance; }
      }
      
      public override EgmSpeedRef BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EgmSpeedRef) {
          return MergeFrom((EgmSpeedRef) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EgmSpeedRef other) {
        if (other == global::abb.egm.EgmSpeedRef.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasJoints) {
          MergeJoints(other.Joints);
        }
        if (other.HasCartesians) {
          MergeCartesians(other.Cartesians);
        }
        if (other.HasExternalJoints) {
          MergeExternalJoints(other.ExternalJoints);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_egmSpeedRefFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _egmSpeedRefFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::abb.egm.EgmJoints.Builder subBuilder = global::abb.egm.EgmJoints.CreateBuilder();
              if (result.hasJoints) {
                subBuilder.MergeFrom(Joints);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Joints = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::abb.egm.EgmCartesianSpeed.Builder subBuilder = global::abb.egm.EgmCartesianSpeed.CreateBuilder();
              if (result.hasCartesians) {
                subBuilder.MergeFrom(Cartesians);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Cartesians = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::abb.egm.EgmJoints.Builder subBuilder = global::abb.egm.EgmJoints.CreateBuilder();
              if (result.hasExternalJoints) {
                subBuilder.MergeFrom(ExternalJoints);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ExternalJoints = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasJoints {
       get { return result.hasJoints; }
      }
      public global::abb.egm.EgmJoints Joints {
        get { return result.Joints; }
        set { SetJoints(value); }
      }
      public Builder SetJoints(global::abb.egm.EgmJoints value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasJoints = true;
        result.joints_ = value;
        return this;
      }
      public Builder SetJoints(global::abb.egm.EgmJoints.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasJoints = true;
        result.joints_ = builderForValue.Build();
        return this;
      }
      public Builder MergeJoints(global::abb.egm.EgmJoints value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasJoints &&
            result.joints_ != global::abb.egm.EgmJoints.DefaultInstance) {
            result.joints_ = global::abb.egm.EgmJoints.CreateBuilder(result.joints_).MergeFrom(value).BuildPartial();
        } else {
          result.joints_ = value;
        }
        result.hasJoints = true;
        return this;
      }
      public Builder ClearJoints() {
        PrepareBuilder();
        result.hasJoints = false;
        result.joints_ = null;
        return this;
      }
      
      public bool HasCartesians {
       get { return result.hasCartesians; }
      }
      public global::abb.egm.EgmCartesianSpeed Cartesians {
        get { return result.Cartesians; }
        set { SetCartesians(value); }
      }
      public Builder SetCartesians(global::abb.egm.EgmCartesianSpeed value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCartesians = true;
        result.cartesians_ = value;
        return this;
      }
      public Builder SetCartesians(global::abb.egm.EgmCartesianSpeed.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCartesians = true;
        result.cartesians_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCartesians(global::abb.egm.EgmCartesianSpeed value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCartesians &&
            result.cartesians_ != global::abb.egm.EgmCartesianSpeed.DefaultInstance) {
            result.cartesians_ = global::abb.egm.EgmCartesianSpeed.CreateBuilder(result.cartesians_).MergeFrom(value).BuildPartial();
        } else {
          result.cartesians_ = value;
        }
        result.hasCartesians = true;
        return this;
      }
      public Builder ClearCartesians() {
        PrepareBuilder();
        result.hasCartesians = false;
        result.cartesians_ = null;
        return this;
      }
      
      public bool HasExternalJoints {
       get { return result.hasExternalJoints; }
      }
      public global::abb.egm.EgmJoints ExternalJoints {
        get { return result.ExternalJoints; }
        set { SetExternalJoints(value); }
      }
      public Builder SetExternalJoints(global::abb.egm.EgmJoints value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExternalJoints = true;
        result.externalJoints_ = value;
        return this;
      }
      public Builder SetExternalJoints(global::abb.egm.EgmJoints.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasExternalJoints = true;
        result.externalJoints_ = builderForValue.Build();
        return this;
      }
      public Builder MergeExternalJoints(global::abb.egm.EgmJoints value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasExternalJoints &&
            result.externalJoints_ != global::abb.egm.EgmJoints.DefaultInstance) {
            result.externalJoints_ = global::abb.egm.EgmJoints.CreateBuilder(result.externalJoints_).MergeFrom(value).BuildPartial();
        } else {
          result.externalJoints_ = value;
        }
        result.hasExternalJoints = true;
        return this;
      }
      public Builder ClearExternalJoints() {
        PrepareBuilder();
        result.hasExternalJoints = false;
        result.externalJoints_ = null;
        return this;
      }
    }
    static EgmSpeedRef() {
      object.ReferenceEquals(global::abb.egm.Egm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EgmPathCorr : pb::GeneratedMessage<EgmPathCorr, EgmPathCorr.Builder> {
    private EgmPathCorr() { }
    private static readonly EgmPathCorr defaultInstance = new EgmPathCorr().MakeReadOnly();
    private static readonly string[] _egmPathCorrFieldNames = new string[] { "age", "pos" };
    private static readonly uint[] _egmPathCorrFieldTags = new uint[] { 16, 10 };
    public static EgmPathCorr DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EgmPathCorr DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EgmPathCorr ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmPathCorr__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EgmPathCorr, EgmPathCorr.Builder> InternalFieldAccessors {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmPathCorr__FieldAccessorTable; }
    }
    
    public const int PosFieldNumber = 1;
    private bool hasPos;
    private global::abb.egm.EgmCartesian pos_;
    public bool HasPos {
      get { return hasPos; }
    }
    public global::abb.egm.EgmCartesian Pos {
      get { return pos_ ?? global::abb.egm.EgmCartesian.DefaultInstance; }
    }
    
    public const int AgeFieldNumber = 2;
    private bool hasAge;
    private uint age_;
    public bool HasAge {
      get { return hasAge; }
    }
    [global::System.CLSCompliant(false)]
    public uint Age {
      get { return age_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPos) return false;
        if (!hasAge) return false;
        if (!Pos.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _egmPathCorrFieldNames;
      if (hasPos) {
        output.WriteMessage(1, field_names[1], Pos);
      }
      if (hasAge) {
        output.WriteUInt32(2, field_names[0], Age);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPos) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Pos);
      }
      if (hasAge) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Age);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static EgmPathCorr ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmPathCorr ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmPathCorr ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmPathCorr ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmPathCorr ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmPathCorr ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EgmPathCorr ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EgmPathCorr ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EgmPathCorr ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmPathCorr ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EgmPathCorr MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EgmPathCorr prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EgmPathCorr, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EgmPathCorr cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EgmPathCorr result;
      
      private EgmPathCorr PrepareBuilder() {
        if (resultIsReadOnly) {
          EgmPathCorr original = result;
          result = new EgmPathCorr();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EgmPathCorr MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::abb.egm.EgmPathCorr.Descriptor; }
      }
      
      public override EgmPathCorr DefaultInstanceForType {
        get { return global::abb.egm.EgmPathCorr.DefaultInstance; }
      }
      
      public override EgmPathCorr BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EgmPathCorr) {
          return MergeFrom((EgmPathCorr) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EgmPathCorr other) {
        if (other == global::abb.egm.EgmPathCorr.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPos) {
          MergePos(other.Pos);
        }
        if (other.HasAge) {
          Age = other.Age;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_egmPathCorrFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _egmPathCorrFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::abb.egm.EgmCartesian.Builder subBuilder = global::abb.egm.EgmCartesian.CreateBuilder();
              if (result.hasPos) {
                subBuilder.MergeFrom(Pos);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Pos = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasAge = input.ReadUInt32(ref result.age_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPos {
       get { return result.hasPos; }
      }
      public global::abb.egm.EgmCartesian Pos {
        get { return result.Pos; }
        set { SetPos(value); }
      }
      public Builder SetPos(global::abb.egm.EgmCartesian value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPos = true;
        result.pos_ = value;
        return this;
      }
      public Builder SetPos(global::abb.egm.EgmCartesian.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPos = true;
        result.pos_ = builderForValue.Build();
        return this;
      }
      public Builder MergePos(global::abb.egm.EgmCartesian value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPos &&
            result.pos_ != global::abb.egm.EgmCartesian.DefaultInstance) {
            result.pos_ = global::abb.egm.EgmCartesian.CreateBuilder(result.pos_).MergeFrom(value).BuildPartial();
        } else {
          result.pos_ = value;
        }
        result.hasPos = true;
        return this;
      }
      public Builder ClearPos() {
        PrepareBuilder();
        result.hasPos = false;
        result.pos_ = null;
        return this;
      }
      
      public bool HasAge {
        get { return result.hasAge; }
      }
      [global::System.CLSCompliant(false)]
      public uint Age {
        get { return result.Age; }
        set { SetAge(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAge(uint value) {
        PrepareBuilder();
        result.hasAge = true;
        result.age_ = value;
        return this;
      }
      public Builder ClearAge() {
        PrepareBuilder();
        result.hasAge = false;
        result.age_ = 0;
        return this;
      }
    }
    static EgmPathCorr() {
      object.ReferenceEquals(global::abb.egm.Egm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EgmFeedBack : pb::GeneratedMessage<EgmFeedBack, EgmFeedBack.Builder> {
    private EgmFeedBack() { }
    private static readonly EgmFeedBack defaultInstance = new EgmFeedBack().MakeReadOnly();
    private static readonly string[] _egmFeedBackFieldNames = new string[] { "cartesian", "externalJoints", "joints", "time" };
    private static readonly uint[] _egmFeedBackFieldTags = new uint[] { 18, 26, 10, 34 };
    public static EgmFeedBack DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EgmFeedBack DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EgmFeedBack ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmFeedBack__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EgmFeedBack, EgmFeedBack.Builder> InternalFieldAccessors {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmFeedBack__FieldAccessorTable; }
    }
    
    public const int JointsFieldNumber = 1;
    private bool hasJoints;
    private global::abb.egm.EgmJoints joints_;
    public bool HasJoints {
      get { return hasJoints; }
    }
    public global::abb.egm.EgmJoints Joints {
      get { return joints_ ?? global::abb.egm.EgmJoints.DefaultInstance; }
    }
    
    public const int CartesianFieldNumber = 2;
    private bool hasCartesian;
    private global::abb.egm.EgmPose cartesian_;
    public bool HasCartesian {
      get { return hasCartesian; }
    }
    public global::abb.egm.EgmPose Cartesian {
      get { return cartesian_ ?? global::abb.egm.EgmPose.DefaultInstance; }
    }
    
    public const int ExternalJointsFieldNumber = 3;
    private bool hasExternalJoints;
    private global::abb.egm.EgmJoints externalJoints_;
    public bool HasExternalJoints {
      get { return hasExternalJoints; }
    }
    public global::abb.egm.EgmJoints ExternalJoints {
      get { return externalJoints_ ?? global::abb.egm.EgmJoints.DefaultInstance; }
    }
    
    public const int TimeFieldNumber = 4;
    private bool hasTime;
    private global::abb.egm.EgmClock time_;
    public bool HasTime {
      get { return hasTime; }
    }
    public global::abb.egm.EgmClock Time {
      get { return time_ ?? global::abb.egm.EgmClock.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasCartesian) {
          if (!Cartesian.IsInitialized) return false;
        }
        if (HasTime) {
          if (!Time.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _egmFeedBackFieldNames;
      if (hasJoints) {
        output.WriteMessage(1, field_names[2], Joints);
      }
      if (hasCartesian) {
        output.WriteMessage(2, field_names[0], Cartesian);
      }
      if (hasExternalJoints) {
        output.WriteMessage(3, field_names[1], ExternalJoints);
      }
      if (hasTime) {
        output.WriteMessage(4, field_names[3], Time);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasJoints) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Joints);
      }
      if (hasCartesian) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Cartesian);
      }
      if (hasExternalJoints) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, ExternalJoints);
      }
      if (hasTime) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, Time);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static EgmFeedBack ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmFeedBack ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmFeedBack ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmFeedBack ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmFeedBack ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmFeedBack ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EgmFeedBack ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EgmFeedBack ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EgmFeedBack ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmFeedBack ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EgmFeedBack MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EgmFeedBack prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EgmFeedBack, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EgmFeedBack cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EgmFeedBack result;
      
      private EgmFeedBack PrepareBuilder() {
        if (resultIsReadOnly) {
          EgmFeedBack original = result;
          result = new EgmFeedBack();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EgmFeedBack MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::abb.egm.EgmFeedBack.Descriptor; }
      }
      
      public override EgmFeedBack DefaultInstanceForType {
        get { return global::abb.egm.EgmFeedBack.DefaultInstance; }
      }
      
      public override EgmFeedBack BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EgmFeedBack) {
          return MergeFrom((EgmFeedBack) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EgmFeedBack other) {
        if (other == global::abb.egm.EgmFeedBack.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasJoints) {
          MergeJoints(other.Joints);
        }
        if (other.HasCartesian) {
          MergeCartesian(other.Cartesian);
        }
        if (other.HasExternalJoints) {
          MergeExternalJoints(other.ExternalJoints);
        }
        if (other.HasTime) {
          MergeTime(other.Time);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_egmFeedBackFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _egmFeedBackFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::abb.egm.EgmJoints.Builder subBuilder = global::abb.egm.EgmJoints.CreateBuilder();
              if (result.hasJoints) {
                subBuilder.MergeFrom(Joints);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Joints = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::abb.egm.EgmPose.Builder subBuilder = global::abb.egm.EgmPose.CreateBuilder();
              if (result.hasCartesian) {
                subBuilder.MergeFrom(Cartesian);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Cartesian = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::abb.egm.EgmJoints.Builder subBuilder = global::abb.egm.EgmJoints.CreateBuilder();
              if (result.hasExternalJoints) {
                subBuilder.MergeFrom(ExternalJoints);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ExternalJoints = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::abb.egm.EgmClock.Builder subBuilder = global::abb.egm.EgmClock.CreateBuilder();
              if (result.hasTime) {
                subBuilder.MergeFrom(Time);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Time = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasJoints {
       get { return result.hasJoints; }
      }
      public global::abb.egm.EgmJoints Joints {
        get { return result.Joints; }
        set { SetJoints(value); }
      }
      public Builder SetJoints(global::abb.egm.EgmJoints value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasJoints = true;
        result.joints_ = value;
        return this;
      }
      public Builder SetJoints(global::abb.egm.EgmJoints.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasJoints = true;
        result.joints_ = builderForValue.Build();
        return this;
      }
      public Builder MergeJoints(global::abb.egm.EgmJoints value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasJoints &&
            result.joints_ != global::abb.egm.EgmJoints.DefaultInstance) {
            result.joints_ = global::abb.egm.EgmJoints.CreateBuilder(result.joints_).MergeFrom(value).BuildPartial();
        } else {
          result.joints_ = value;
        }
        result.hasJoints = true;
        return this;
      }
      public Builder ClearJoints() {
        PrepareBuilder();
        result.hasJoints = false;
        result.joints_ = null;
        return this;
      }
      
      public bool HasCartesian {
       get { return result.hasCartesian; }
      }
      public global::abb.egm.EgmPose Cartesian {
        get { return result.Cartesian; }
        set { SetCartesian(value); }
      }
      public Builder SetCartesian(global::abb.egm.EgmPose value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCartesian = true;
        result.cartesian_ = value;
        return this;
      }
      public Builder SetCartesian(global::abb.egm.EgmPose.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCartesian = true;
        result.cartesian_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCartesian(global::abb.egm.EgmPose value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCartesian &&
            result.cartesian_ != global::abb.egm.EgmPose.DefaultInstance) {
            result.cartesian_ = global::abb.egm.EgmPose.CreateBuilder(result.cartesian_).MergeFrom(value).BuildPartial();
        } else {
          result.cartesian_ = value;
        }
        result.hasCartesian = true;
        return this;
      }
      public Builder ClearCartesian() {
        PrepareBuilder();
        result.hasCartesian = false;
        result.cartesian_ = null;
        return this;
      }
      
      public bool HasExternalJoints {
       get { return result.hasExternalJoints; }
      }
      public global::abb.egm.EgmJoints ExternalJoints {
        get { return result.ExternalJoints; }
        set { SetExternalJoints(value); }
      }
      public Builder SetExternalJoints(global::abb.egm.EgmJoints value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExternalJoints = true;
        result.externalJoints_ = value;
        return this;
      }
      public Builder SetExternalJoints(global::abb.egm.EgmJoints.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasExternalJoints = true;
        result.externalJoints_ = builderForValue.Build();
        return this;
      }
      public Builder MergeExternalJoints(global::abb.egm.EgmJoints value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasExternalJoints &&
            result.externalJoints_ != global::abb.egm.EgmJoints.DefaultInstance) {
            result.externalJoints_ = global::abb.egm.EgmJoints.CreateBuilder(result.externalJoints_).MergeFrom(value).BuildPartial();
        } else {
          result.externalJoints_ = value;
        }
        result.hasExternalJoints = true;
        return this;
      }
      public Builder ClearExternalJoints() {
        PrepareBuilder();
        result.hasExternalJoints = false;
        result.externalJoints_ = null;
        return this;
      }
      
      public bool HasTime {
       get { return result.hasTime; }
      }
      public global::abb.egm.EgmClock Time {
        get { return result.Time; }
        set { SetTime(value); }
      }
      public Builder SetTime(global::abb.egm.EgmClock value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTime = true;
        result.time_ = value;
        return this;
      }
      public Builder SetTime(global::abb.egm.EgmClock.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTime = true;
        result.time_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTime(global::abb.egm.EgmClock value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTime &&
            result.time_ != global::abb.egm.EgmClock.DefaultInstance) {
            result.time_ = global::abb.egm.EgmClock.CreateBuilder(result.time_).MergeFrom(value).BuildPartial();
        } else {
          result.time_ = value;
        }
        result.hasTime = true;
        return this;
      }
      public Builder ClearTime() {
        PrepareBuilder();
        result.hasTime = false;
        result.time_ = null;
        return this;
      }
    }
    static EgmFeedBack() {
      object.ReferenceEquals(global::abb.egm.Egm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EgmMotorState : pb::GeneratedMessage<EgmMotorState, EgmMotorState.Builder> {
    private EgmMotorState() { }
    private static readonly EgmMotorState defaultInstance = new EgmMotorState().MakeReadOnly();
    private static readonly string[] _egmMotorStateFieldNames = new string[] { "state" };
    private static readonly uint[] _egmMotorStateFieldTags = new uint[] { 8 };
    public static EgmMotorState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EgmMotorState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EgmMotorState ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmMotorState__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EgmMotorState, EgmMotorState.Builder> InternalFieldAccessors {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmMotorState__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum MotorStateType {
        MOTORS_UNDEFINED = 0,
        MOTORS_ON = 1,
        MOTORS_OFF = 2,
      }
      
    }
    #endregion
    
    public const int StateFieldNumber = 1;
    private bool hasState;
    private global::abb.egm.EgmMotorState.Types.MotorStateType state_ = global::abb.egm.EgmMotorState.Types.MotorStateType.MOTORS_UNDEFINED;
    public bool HasState {
      get { return hasState; }
    }
    public global::abb.egm.EgmMotorState.Types.MotorStateType State {
      get { return state_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasState) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _egmMotorStateFieldNames;
      if (hasState) {
        output.WriteEnum(1, field_names[0], (int) State, State);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasState) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) State);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static EgmMotorState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmMotorState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmMotorState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmMotorState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmMotorState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmMotorState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EgmMotorState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EgmMotorState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EgmMotorState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmMotorState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EgmMotorState MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EgmMotorState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EgmMotorState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EgmMotorState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EgmMotorState result;
      
      private EgmMotorState PrepareBuilder() {
        if (resultIsReadOnly) {
          EgmMotorState original = result;
          result = new EgmMotorState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EgmMotorState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::abb.egm.EgmMotorState.Descriptor; }
      }
      
      public override EgmMotorState DefaultInstanceForType {
        get { return global::abb.egm.EgmMotorState.DefaultInstance; }
      }
      
      public override EgmMotorState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EgmMotorState) {
          return MergeFrom((EgmMotorState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EgmMotorState other) {
        if (other == global::abb.egm.EgmMotorState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasState) {
          State = other.State;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_egmMotorStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _egmMotorStateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.state_, out unknown)) {
                result.hasState = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasState {
       get { return result.hasState; }
      }
      public global::abb.egm.EgmMotorState.Types.MotorStateType State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(global::abb.egm.EgmMotorState.Types.MotorStateType value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = global::abb.egm.EgmMotorState.Types.MotorStateType.MOTORS_UNDEFINED;
        return this;
      }
    }
    static EgmMotorState() {
      object.ReferenceEquals(global::abb.egm.Egm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EgmMCIState : pb::GeneratedMessage<EgmMCIState, EgmMCIState.Builder> {
    private EgmMCIState() { }
    private static readonly EgmMCIState defaultInstance = new EgmMCIState().MakeReadOnly();
    private static readonly string[] _egmMCIStateFieldNames = new string[] { "state" };
    private static readonly uint[] _egmMCIStateFieldTags = new uint[] { 8 };
    public static EgmMCIState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EgmMCIState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EgmMCIState ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmMCIState__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EgmMCIState, EgmMCIState.Builder> InternalFieldAccessors {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmMCIState__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum MCIStateType {
        MCI_UNDEFINED = 0,
        MCI_ERROR = 1,
        MCI_STOPPED = 2,
        MCI_RUNNING = 3,
      }
      
    }
    #endregion
    
    public const int StateFieldNumber = 1;
    private bool hasState;
    private global::abb.egm.EgmMCIState.Types.MCIStateType state_ = global::abb.egm.EgmMCIState.Types.MCIStateType.MCI_UNDEFINED;
    public bool HasState {
      get { return hasState; }
    }
    public global::abb.egm.EgmMCIState.Types.MCIStateType State {
      get { return state_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasState) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _egmMCIStateFieldNames;
      if (hasState) {
        output.WriteEnum(1, field_names[0], (int) State, State);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasState) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) State);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static EgmMCIState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmMCIState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmMCIState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmMCIState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmMCIState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmMCIState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EgmMCIState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EgmMCIState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EgmMCIState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmMCIState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EgmMCIState MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EgmMCIState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EgmMCIState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EgmMCIState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EgmMCIState result;
      
      private EgmMCIState PrepareBuilder() {
        if (resultIsReadOnly) {
          EgmMCIState original = result;
          result = new EgmMCIState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EgmMCIState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::abb.egm.EgmMCIState.Descriptor; }
      }
      
      public override EgmMCIState DefaultInstanceForType {
        get { return global::abb.egm.EgmMCIState.DefaultInstance; }
      }
      
      public override EgmMCIState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EgmMCIState) {
          return MergeFrom((EgmMCIState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EgmMCIState other) {
        if (other == global::abb.egm.EgmMCIState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasState) {
          State = other.State;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_egmMCIStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _egmMCIStateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.state_, out unknown)) {
                result.hasState = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasState {
       get { return result.hasState; }
      }
      public global::abb.egm.EgmMCIState.Types.MCIStateType State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(global::abb.egm.EgmMCIState.Types.MCIStateType value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = global::abb.egm.EgmMCIState.Types.MCIStateType.MCI_UNDEFINED;
        return this;
      }
    }
    static EgmMCIState() {
      object.ReferenceEquals(global::abb.egm.Egm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EgmRapidCtrlExecState : pb::GeneratedMessage<EgmRapidCtrlExecState, EgmRapidCtrlExecState.Builder> {
    private EgmRapidCtrlExecState() { }
    private static readonly EgmRapidCtrlExecState defaultInstance = new EgmRapidCtrlExecState().MakeReadOnly();
    private static readonly string[] _egmRapidCtrlExecStateFieldNames = new string[] { "state" };
    private static readonly uint[] _egmRapidCtrlExecStateFieldTags = new uint[] { 8 };
    public static EgmRapidCtrlExecState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EgmRapidCtrlExecState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EgmRapidCtrlExecState ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmRapidCtrlExecState__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EgmRapidCtrlExecState, EgmRapidCtrlExecState.Builder> InternalFieldAccessors {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmRapidCtrlExecState__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum RapidCtrlExecStateType {
        RAPID_UNDEFINED = 0,
        RAPID_STOPPED = 1,
        RAPID_RUNNING = 2,
      }
      
    }
    #endregion
    
    public const int StateFieldNumber = 1;
    private bool hasState;
    private global::abb.egm.EgmRapidCtrlExecState.Types.RapidCtrlExecStateType state_ = global::abb.egm.EgmRapidCtrlExecState.Types.RapidCtrlExecStateType.RAPID_UNDEFINED;
    public bool HasState {
      get { return hasState; }
    }
    public global::abb.egm.EgmRapidCtrlExecState.Types.RapidCtrlExecStateType State {
      get { return state_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasState) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _egmRapidCtrlExecStateFieldNames;
      if (hasState) {
        output.WriteEnum(1, field_names[0], (int) State, State);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasState) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) State);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static EgmRapidCtrlExecState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmRapidCtrlExecState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmRapidCtrlExecState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmRapidCtrlExecState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmRapidCtrlExecState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmRapidCtrlExecState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EgmRapidCtrlExecState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EgmRapidCtrlExecState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EgmRapidCtrlExecState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmRapidCtrlExecState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EgmRapidCtrlExecState MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EgmRapidCtrlExecState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EgmRapidCtrlExecState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EgmRapidCtrlExecState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EgmRapidCtrlExecState result;
      
      private EgmRapidCtrlExecState PrepareBuilder() {
        if (resultIsReadOnly) {
          EgmRapidCtrlExecState original = result;
          result = new EgmRapidCtrlExecState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EgmRapidCtrlExecState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::abb.egm.EgmRapidCtrlExecState.Descriptor; }
      }
      
      public override EgmRapidCtrlExecState DefaultInstanceForType {
        get { return global::abb.egm.EgmRapidCtrlExecState.DefaultInstance; }
      }
      
      public override EgmRapidCtrlExecState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EgmRapidCtrlExecState) {
          return MergeFrom((EgmRapidCtrlExecState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EgmRapidCtrlExecState other) {
        if (other == global::abb.egm.EgmRapidCtrlExecState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasState) {
          State = other.State;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_egmRapidCtrlExecStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _egmRapidCtrlExecStateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.state_, out unknown)) {
                result.hasState = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasState {
       get { return result.hasState; }
      }
      public global::abb.egm.EgmRapidCtrlExecState.Types.RapidCtrlExecStateType State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(global::abb.egm.EgmRapidCtrlExecState.Types.RapidCtrlExecStateType value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = global::abb.egm.EgmRapidCtrlExecState.Types.RapidCtrlExecStateType.RAPID_UNDEFINED;
        return this;
      }
    }
    static EgmRapidCtrlExecState() {
      object.ReferenceEquals(global::abb.egm.Egm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EgmTestSignals : pb::GeneratedMessage<EgmTestSignals, EgmTestSignals.Builder> {
    private EgmTestSignals() { }
    private static readonly EgmTestSignals defaultInstance = new EgmTestSignals().MakeReadOnly();
    private static readonly string[] _egmTestSignalsFieldNames = new string[] { "signals" };
    private static readonly uint[] _egmTestSignalsFieldTags = new uint[] { 9 };
    public static EgmTestSignals DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EgmTestSignals DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EgmTestSignals ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmTestSignals__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EgmTestSignals, EgmTestSignals.Builder> InternalFieldAccessors {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmTestSignals__FieldAccessorTable; }
    }
    
    public const int SignalsFieldNumber = 1;
    private pbc::PopsicleList<double> signals_ = new pbc::PopsicleList<double>();
    public scg::IList<double> SignalsList {
      get { return pbc::Lists.AsReadOnly(signals_); }
    }
    public int SignalsCount {
      get { return signals_.Count; }
    }
    public double GetSignals(int index) {
      return signals_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _egmTestSignalsFieldNames;
      if (signals_.Count > 0) {
        output.WriteDoubleArray(1, field_names[0], signals_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      {
        int dataSize = 0;
        dataSize = 8 * signals_.Count;
        size += dataSize;
        size += 1 * signals_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static EgmTestSignals ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmTestSignals ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmTestSignals ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmTestSignals ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmTestSignals ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmTestSignals ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EgmTestSignals ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EgmTestSignals ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EgmTestSignals ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmTestSignals ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EgmTestSignals MakeReadOnly() {
      signals_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EgmTestSignals prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EgmTestSignals, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EgmTestSignals cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EgmTestSignals result;
      
      private EgmTestSignals PrepareBuilder() {
        if (resultIsReadOnly) {
          EgmTestSignals original = result;
          result = new EgmTestSignals();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EgmTestSignals MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::abb.egm.EgmTestSignals.Descriptor; }
      }
      
      public override EgmTestSignals DefaultInstanceForType {
        get { return global::abb.egm.EgmTestSignals.DefaultInstance; }
      }
      
      public override EgmTestSignals BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EgmTestSignals) {
          return MergeFrom((EgmTestSignals) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EgmTestSignals other) {
        if (other == global::abb.egm.EgmTestSignals.DefaultInstance) return this;
        PrepareBuilder();
        if (other.signals_.Count != 0) {
          result.signals_.Add(other.signals_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_egmTestSignalsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _egmTestSignalsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 9: {
              input.ReadDoubleArray(tag, field_name, result.signals_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<double> SignalsList {
        get { return PrepareBuilder().signals_; }
      }
      public int SignalsCount {
        get { return result.SignalsCount; }
      }
      public double GetSignals(int index) {
        return result.GetSignals(index);
      }
      public Builder SetSignals(int index, double value) {
        PrepareBuilder();
        result.signals_[index] = value;
        return this;
      }
      public Builder AddSignals(double value) {
        PrepareBuilder();
        result.signals_.Add(value);
        return this;
      }
      public Builder AddRangeSignals(scg::IEnumerable<double> values) {
        PrepareBuilder();
        result.signals_.Add(values);
        return this;
      }
      public Builder ClearSignals() {
        PrepareBuilder();
        result.signals_.Clear();
        return this;
      }
    }
    static EgmTestSignals() {
      object.ReferenceEquals(global::abb.egm.Egm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EgmMeasuredForce : pb::GeneratedMessage<EgmMeasuredForce, EgmMeasuredForce.Builder> {
    private EgmMeasuredForce() { }
    private static readonly EgmMeasuredForce defaultInstance = new EgmMeasuredForce().MakeReadOnly();
    private static readonly string[] _egmMeasuredForceFieldNames = new string[] { "force" };
    private static readonly uint[] _egmMeasuredForceFieldTags = new uint[] { 9 };
    public static EgmMeasuredForce DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EgmMeasuredForce DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EgmMeasuredForce ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmMeasuredForce__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EgmMeasuredForce, EgmMeasuredForce.Builder> InternalFieldAccessors {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmMeasuredForce__FieldAccessorTable; }
    }
    
    public const int ForceFieldNumber = 1;
    private pbc::PopsicleList<double> force_ = new pbc::PopsicleList<double>();
    public scg::IList<double> ForceList {
      get { return pbc::Lists.AsReadOnly(force_); }
    }
    public int ForceCount {
      get { return force_.Count; }
    }
    public double GetForce(int index) {
      return force_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _egmMeasuredForceFieldNames;
      if (force_.Count > 0) {
        output.WriteDoubleArray(1, field_names[0], force_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      {
        int dataSize = 0;
        dataSize = 8 * force_.Count;
        size += dataSize;
        size += 1 * force_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static EgmMeasuredForce ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmMeasuredForce ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmMeasuredForce ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmMeasuredForce ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmMeasuredForce ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmMeasuredForce ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EgmMeasuredForce ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EgmMeasuredForce ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EgmMeasuredForce ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmMeasuredForce ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EgmMeasuredForce MakeReadOnly() {
      force_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EgmMeasuredForce prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EgmMeasuredForce, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EgmMeasuredForce cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EgmMeasuredForce result;
      
      private EgmMeasuredForce PrepareBuilder() {
        if (resultIsReadOnly) {
          EgmMeasuredForce original = result;
          result = new EgmMeasuredForce();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EgmMeasuredForce MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::abb.egm.EgmMeasuredForce.Descriptor; }
      }
      
      public override EgmMeasuredForce DefaultInstanceForType {
        get { return global::abb.egm.EgmMeasuredForce.DefaultInstance; }
      }
      
      public override EgmMeasuredForce BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EgmMeasuredForce) {
          return MergeFrom((EgmMeasuredForce) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EgmMeasuredForce other) {
        if (other == global::abb.egm.EgmMeasuredForce.DefaultInstance) return this;
        PrepareBuilder();
        if (other.force_.Count != 0) {
          result.force_.Add(other.force_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_egmMeasuredForceFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _egmMeasuredForceFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 9: {
              input.ReadDoubleArray(tag, field_name, result.force_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<double> ForceList {
        get { return PrepareBuilder().force_; }
      }
      public int ForceCount {
        get { return result.ForceCount; }
      }
      public double GetForce(int index) {
        return result.GetForce(index);
      }
      public Builder SetForce(int index, double value) {
        PrepareBuilder();
        result.force_[index] = value;
        return this;
      }
      public Builder AddForce(double value) {
        PrepareBuilder();
        result.force_.Add(value);
        return this;
      }
      public Builder AddRangeForce(scg::IEnumerable<double> values) {
        PrepareBuilder();
        result.force_.Add(values);
        return this;
      }
      public Builder ClearForce() {
        PrepareBuilder();
        result.force_.Clear();
        return this;
      }
    }
    static EgmMeasuredForce() {
      object.ReferenceEquals(global::abb.egm.Egm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EgmRobot : pb::GeneratedMessage<EgmRobot, EgmRobot.Builder> {
    private EgmRobot() { }
    private static readonly EgmRobot defaultInstance = new EgmRobot().MakeReadOnly();
    private static readonly string[] _egmRobotFieldNames = new string[] { "feedBack", "header", "mciConvergenceMet", "mciState", "measuredForce", "motorState", "planned", "rapidExecState", "testSignals" };
    private static readonly uint[] _egmRobotFieldTags = new uint[] { 18, 10, 48, 42, 74, 34, 26, 66, 58 };
    public static EgmRobot DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EgmRobot DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EgmRobot ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmRobot__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EgmRobot, EgmRobot.Builder> InternalFieldAccessors {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmRobot__FieldAccessorTable; }
    }
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::abb.egm.EgmHeader header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::abb.egm.EgmHeader Header {
      get { return header_ ?? global::abb.egm.EgmHeader.DefaultInstance; }
    }
    
    public const int FeedBackFieldNumber = 2;
    private bool hasFeedBack;
    private global::abb.egm.EgmFeedBack feedBack_;
    public bool HasFeedBack {
      get { return hasFeedBack; }
    }
    public global::abb.egm.EgmFeedBack FeedBack {
      get { return feedBack_ ?? global::abb.egm.EgmFeedBack.DefaultInstance; }
    }
    
    public const int PlannedFieldNumber = 3;
    private bool hasPlanned;
    private global::abb.egm.EgmPlanned planned_;
    public bool HasPlanned {
      get { return hasPlanned; }
    }
    public global::abb.egm.EgmPlanned Planned {
      get { return planned_ ?? global::abb.egm.EgmPlanned.DefaultInstance; }
    }
    
    public const int MotorStateFieldNumber = 4;
    private bool hasMotorState;
    private global::abb.egm.EgmMotorState motorState_;
    public bool HasMotorState {
      get { return hasMotorState; }
    }
    public global::abb.egm.EgmMotorState MotorState {
      get { return motorState_ ?? global::abb.egm.EgmMotorState.DefaultInstance; }
    }
    
    public const int MciStateFieldNumber = 5;
    private bool hasMciState;
    private global::abb.egm.EgmMCIState mciState_;
    public bool HasMciState {
      get { return hasMciState; }
    }
    public global::abb.egm.EgmMCIState MciState {
      get { return mciState_ ?? global::abb.egm.EgmMCIState.DefaultInstance; }
    }
    
    public const int MciConvergenceMetFieldNumber = 6;
    private bool hasMciConvergenceMet;
    private bool mciConvergenceMet_;
    public bool HasMciConvergenceMet {
      get { return hasMciConvergenceMet; }
    }
    public bool MciConvergenceMet {
      get { return mciConvergenceMet_; }
    }
    
    public const int TestSignalsFieldNumber = 7;
    private bool hasTestSignals;
    private global::abb.egm.EgmTestSignals testSignals_;
    public bool HasTestSignals {
      get { return hasTestSignals; }
    }
    public global::abb.egm.EgmTestSignals TestSignals {
      get { return testSignals_ ?? global::abb.egm.EgmTestSignals.DefaultInstance; }
    }
    
    public const int RapidExecStateFieldNumber = 8;
    private bool hasRapidExecState;
    private global::abb.egm.EgmRapidCtrlExecState rapidExecState_;
    public bool HasRapidExecState {
      get { return hasRapidExecState; }
    }
    public global::abb.egm.EgmRapidCtrlExecState RapidExecState {
      get { return rapidExecState_ ?? global::abb.egm.EgmRapidCtrlExecState.DefaultInstance; }
    }
    
    public const int MeasuredForceFieldNumber = 9;
    private bool hasMeasuredForce;
    private global::abb.egm.EgmMeasuredForce measuredForce_;
    public bool HasMeasuredForce {
      get { return hasMeasuredForce; }
    }
    public global::abb.egm.EgmMeasuredForce MeasuredForce {
      get { return measuredForce_ ?? global::abb.egm.EgmMeasuredForce.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasFeedBack) {
          if (!FeedBack.IsInitialized) return false;
        }
        if (HasPlanned) {
          if (!Planned.IsInitialized) return false;
        }
        if (HasMotorState) {
          if (!MotorState.IsInitialized) return false;
        }
        if (HasMciState) {
          if (!MciState.IsInitialized) return false;
        }
        if (HasRapidExecState) {
          if (!RapidExecState.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _egmRobotFieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[1], Header);
      }
      if (hasFeedBack) {
        output.WriteMessage(2, field_names[0], FeedBack);
      }
      if (hasPlanned) {
        output.WriteMessage(3, field_names[6], Planned);
      }
      if (hasMotorState) {
        output.WriteMessage(4, field_names[5], MotorState);
      }
      if (hasMciState) {
        output.WriteMessage(5, field_names[3], MciState);
      }
      if (hasMciConvergenceMet) {
        output.WriteBool(6, field_names[2], MciConvergenceMet);
      }
      if (hasTestSignals) {
        output.WriteMessage(7, field_names[8], TestSignals);
      }
      if (hasRapidExecState) {
        output.WriteMessage(8, field_names[7], RapidExecState);
      }
      if (hasMeasuredForce) {
        output.WriteMessage(9, field_names[4], MeasuredForce);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasHeader) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
      }
      if (hasFeedBack) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, FeedBack);
      }
      if (hasPlanned) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Planned);
      }
      if (hasMotorState) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, MotorState);
      }
      if (hasMciState) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, MciState);
      }
      if (hasMciConvergenceMet) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, MciConvergenceMet);
      }
      if (hasTestSignals) {
        size += pb::CodedOutputStream.ComputeMessageSize(7, TestSignals);
      }
      if (hasRapidExecState) {
        size += pb::CodedOutputStream.ComputeMessageSize(8, RapidExecState);
      }
      if (hasMeasuredForce) {
        size += pb::CodedOutputStream.ComputeMessageSize(9, MeasuredForce);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static EgmRobot ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmRobot ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmRobot ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmRobot ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmRobot ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmRobot ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EgmRobot ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EgmRobot ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EgmRobot ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmRobot ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EgmRobot MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EgmRobot prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EgmRobot, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EgmRobot cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EgmRobot result;
      
      private EgmRobot PrepareBuilder() {
        if (resultIsReadOnly) {
          EgmRobot original = result;
          result = new EgmRobot();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EgmRobot MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::abb.egm.EgmRobot.Descriptor; }
      }
      
      public override EgmRobot DefaultInstanceForType {
        get { return global::abb.egm.EgmRobot.DefaultInstance; }
      }
      
      public override EgmRobot BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EgmRobot) {
          return MergeFrom((EgmRobot) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EgmRobot other) {
        if (other == global::abb.egm.EgmRobot.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.HasFeedBack) {
          MergeFeedBack(other.FeedBack);
        }
        if (other.HasPlanned) {
          MergePlanned(other.Planned);
        }
        if (other.HasMotorState) {
          MergeMotorState(other.MotorState);
        }
        if (other.HasMciState) {
          MergeMciState(other.MciState);
        }
        if (other.HasMciConvergenceMet) {
          MciConvergenceMet = other.MciConvergenceMet;
        }
        if (other.HasTestSignals) {
          MergeTestSignals(other.TestSignals);
        }
        if (other.HasRapidExecState) {
          MergeRapidExecState(other.RapidExecState);
        }
        if (other.HasMeasuredForce) {
          MergeMeasuredForce(other.MeasuredForce);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_egmRobotFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _egmRobotFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::abb.egm.EgmHeader.Builder subBuilder = global::abb.egm.EgmHeader.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::abb.egm.EgmFeedBack.Builder subBuilder = global::abb.egm.EgmFeedBack.CreateBuilder();
              if (result.hasFeedBack) {
                subBuilder.MergeFrom(FeedBack);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              FeedBack = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::abb.egm.EgmPlanned.Builder subBuilder = global::abb.egm.EgmPlanned.CreateBuilder();
              if (result.hasPlanned) {
                subBuilder.MergeFrom(Planned);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Planned = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::abb.egm.EgmMotorState.Builder subBuilder = global::abb.egm.EgmMotorState.CreateBuilder();
              if (result.hasMotorState) {
                subBuilder.MergeFrom(MotorState);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MotorState = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::abb.egm.EgmMCIState.Builder subBuilder = global::abb.egm.EgmMCIState.CreateBuilder();
              if (result.hasMciState) {
                subBuilder.MergeFrom(MciState);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MciState = subBuilder.BuildPartial();
              break;
            }
            case 48: {
              result.hasMciConvergenceMet = input.ReadBool(ref result.mciConvergenceMet_);
              break;
            }
            case 58: {
              global::abb.egm.EgmTestSignals.Builder subBuilder = global::abb.egm.EgmTestSignals.CreateBuilder();
              if (result.hasTestSignals) {
                subBuilder.MergeFrom(TestSignals);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TestSignals = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::abb.egm.EgmRapidCtrlExecState.Builder subBuilder = global::abb.egm.EgmRapidCtrlExecState.CreateBuilder();
              if (result.hasRapidExecState) {
                subBuilder.MergeFrom(RapidExecState);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RapidExecState = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              global::abb.egm.EgmMeasuredForce.Builder subBuilder = global::abb.egm.EgmMeasuredForce.CreateBuilder();
              if (result.hasMeasuredForce) {
                subBuilder.MergeFrom(MeasuredForce);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MeasuredForce = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::abb.egm.EgmHeader Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::abb.egm.EgmHeader value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::abb.egm.EgmHeader.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::abb.egm.EgmHeader value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::abb.egm.EgmHeader.DefaultInstance) {
            result.header_ = global::abb.egm.EgmHeader.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public bool HasFeedBack {
       get { return result.hasFeedBack; }
      }
      public global::abb.egm.EgmFeedBack FeedBack {
        get { return result.FeedBack; }
        set { SetFeedBack(value); }
      }
      public Builder SetFeedBack(global::abb.egm.EgmFeedBack value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFeedBack = true;
        result.feedBack_ = value;
        return this;
      }
      public Builder SetFeedBack(global::abb.egm.EgmFeedBack.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFeedBack = true;
        result.feedBack_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFeedBack(global::abb.egm.EgmFeedBack value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFeedBack &&
            result.feedBack_ != global::abb.egm.EgmFeedBack.DefaultInstance) {
            result.feedBack_ = global::abb.egm.EgmFeedBack.CreateBuilder(result.feedBack_).MergeFrom(value).BuildPartial();
        } else {
          result.feedBack_ = value;
        }
        result.hasFeedBack = true;
        return this;
      }
      public Builder ClearFeedBack() {
        PrepareBuilder();
        result.hasFeedBack = false;
        result.feedBack_ = null;
        return this;
      }
      
      public bool HasPlanned {
       get { return result.hasPlanned; }
      }
      public global::abb.egm.EgmPlanned Planned {
        get { return result.Planned; }
        set { SetPlanned(value); }
      }
      public Builder SetPlanned(global::abb.egm.EgmPlanned value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlanned = true;
        result.planned_ = value;
        return this;
      }
      public Builder SetPlanned(global::abb.egm.EgmPlanned.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPlanned = true;
        result.planned_ = builderForValue.Build();
        return this;
      }
      public Builder MergePlanned(global::abb.egm.EgmPlanned value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPlanned &&
            result.planned_ != global::abb.egm.EgmPlanned.DefaultInstance) {
            result.planned_ = global::abb.egm.EgmPlanned.CreateBuilder(result.planned_).MergeFrom(value).BuildPartial();
        } else {
          result.planned_ = value;
        }
        result.hasPlanned = true;
        return this;
      }
      public Builder ClearPlanned() {
        PrepareBuilder();
        result.hasPlanned = false;
        result.planned_ = null;
        return this;
      }
      
      public bool HasMotorState {
       get { return result.hasMotorState; }
      }
      public global::abb.egm.EgmMotorState MotorState {
        get { return result.MotorState; }
        set { SetMotorState(value); }
      }
      public Builder SetMotorState(global::abb.egm.EgmMotorState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMotorState = true;
        result.motorState_ = value;
        return this;
      }
      public Builder SetMotorState(global::abb.egm.EgmMotorState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMotorState = true;
        result.motorState_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMotorState(global::abb.egm.EgmMotorState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMotorState &&
            result.motorState_ != global::abb.egm.EgmMotorState.DefaultInstance) {
            result.motorState_ = global::abb.egm.EgmMotorState.CreateBuilder(result.motorState_).MergeFrom(value).BuildPartial();
        } else {
          result.motorState_ = value;
        }
        result.hasMotorState = true;
        return this;
      }
      public Builder ClearMotorState() {
        PrepareBuilder();
        result.hasMotorState = false;
        result.motorState_ = null;
        return this;
      }
      
      public bool HasMciState {
       get { return result.hasMciState; }
      }
      public global::abb.egm.EgmMCIState MciState {
        get { return result.MciState; }
        set { SetMciState(value); }
      }
      public Builder SetMciState(global::abb.egm.EgmMCIState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMciState = true;
        result.mciState_ = value;
        return this;
      }
      public Builder SetMciState(global::abb.egm.EgmMCIState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMciState = true;
        result.mciState_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMciState(global::abb.egm.EgmMCIState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMciState &&
            result.mciState_ != global::abb.egm.EgmMCIState.DefaultInstance) {
            result.mciState_ = global::abb.egm.EgmMCIState.CreateBuilder(result.mciState_).MergeFrom(value).BuildPartial();
        } else {
          result.mciState_ = value;
        }
        result.hasMciState = true;
        return this;
      }
      public Builder ClearMciState() {
        PrepareBuilder();
        result.hasMciState = false;
        result.mciState_ = null;
        return this;
      }
      
      public bool HasMciConvergenceMet {
        get { return result.hasMciConvergenceMet; }
      }
      public bool MciConvergenceMet {
        get { return result.MciConvergenceMet; }
        set { SetMciConvergenceMet(value); }
      }
      public Builder SetMciConvergenceMet(bool value) {
        PrepareBuilder();
        result.hasMciConvergenceMet = true;
        result.mciConvergenceMet_ = value;
        return this;
      }
      public Builder ClearMciConvergenceMet() {
        PrepareBuilder();
        result.hasMciConvergenceMet = false;
        result.mciConvergenceMet_ = false;
        return this;
      }
      
      public bool HasTestSignals {
       get { return result.hasTestSignals; }
      }
      public global::abb.egm.EgmTestSignals TestSignals {
        get { return result.TestSignals; }
        set { SetTestSignals(value); }
      }
      public Builder SetTestSignals(global::abb.egm.EgmTestSignals value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTestSignals = true;
        result.testSignals_ = value;
        return this;
      }
      public Builder SetTestSignals(global::abb.egm.EgmTestSignals.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTestSignals = true;
        result.testSignals_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTestSignals(global::abb.egm.EgmTestSignals value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTestSignals &&
            result.testSignals_ != global::abb.egm.EgmTestSignals.DefaultInstance) {
            result.testSignals_ = global::abb.egm.EgmTestSignals.CreateBuilder(result.testSignals_).MergeFrom(value).BuildPartial();
        } else {
          result.testSignals_ = value;
        }
        result.hasTestSignals = true;
        return this;
      }
      public Builder ClearTestSignals() {
        PrepareBuilder();
        result.hasTestSignals = false;
        result.testSignals_ = null;
        return this;
      }
      
      public bool HasRapidExecState {
       get { return result.hasRapidExecState; }
      }
      public global::abb.egm.EgmRapidCtrlExecState RapidExecState {
        get { return result.RapidExecState; }
        set { SetRapidExecState(value); }
      }
      public Builder SetRapidExecState(global::abb.egm.EgmRapidCtrlExecState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRapidExecState = true;
        result.rapidExecState_ = value;
        return this;
      }
      public Builder SetRapidExecState(global::abb.egm.EgmRapidCtrlExecState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRapidExecState = true;
        result.rapidExecState_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRapidExecState(global::abb.egm.EgmRapidCtrlExecState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRapidExecState &&
            result.rapidExecState_ != global::abb.egm.EgmRapidCtrlExecState.DefaultInstance) {
            result.rapidExecState_ = global::abb.egm.EgmRapidCtrlExecState.CreateBuilder(result.rapidExecState_).MergeFrom(value).BuildPartial();
        } else {
          result.rapidExecState_ = value;
        }
        result.hasRapidExecState = true;
        return this;
      }
      public Builder ClearRapidExecState() {
        PrepareBuilder();
        result.hasRapidExecState = false;
        result.rapidExecState_ = null;
        return this;
      }
      
      public bool HasMeasuredForce {
       get { return result.hasMeasuredForce; }
      }
      public global::abb.egm.EgmMeasuredForce MeasuredForce {
        get { return result.MeasuredForce; }
        set { SetMeasuredForce(value); }
      }
      public Builder SetMeasuredForce(global::abb.egm.EgmMeasuredForce value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMeasuredForce = true;
        result.measuredForce_ = value;
        return this;
      }
      public Builder SetMeasuredForce(global::abb.egm.EgmMeasuredForce.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMeasuredForce = true;
        result.measuredForce_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMeasuredForce(global::abb.egm.EgmMeasuredForce value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMeasuredForce &&
            result.measuredForce_ != global::abb.egm.EgmMeasuredForce.DefaultInstance) {
            result.measuredForce_ = global::abb.egm.EgmMeasuredForce.CreateBuilder(result.measuredForce_).MergeFrom(value).BuildPartial();
        } else {
          result.measuredForce_ = value;
        }
        result.hasMeasuredForce = true;
        return this;
      }
      public Builder ClearMeasuredForce() {
        PrepareBuilder();
        result.hasMeasuredForce = false;
        result.measuredForce_ = null;
        return this;
      }
    }
    static EgmRobot() {
      object.ReferenceEquals(global::abb.egm.Egm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EgmSensor : pb::GeneratedMessage<EgmSensor, EgmSensor.Builder> {
    private EgmSensor() { }
    private static readonly EgmSensor defaultInstance = new EgmSensor().MakeReadOnly();
    private static readonly string[] _egmSensorFieldNames = new string[] { "header", "planned", "speedRef" };
    private static readonly uint[] _egmSensorFieldTags = new uint[] { 10, 18, 26 };
    public static EgmSensor DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EgmSensor DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EgmSensor ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmSensor__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EgmSensor, EgmSensor.Builder> InternalFieldAccessors {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmSensor__FieldAccessorTable; }
    }
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::abb.egm.EgmHeader header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::abb.egm.EgmHeader Header {
      get { return header_ ?? global::abb.egm.EgmHeader.DefaultInstance; }
    }
    
    public const int PlannedFieldNumber = 2;
    private bool hasPlanned;
    private global::abb.egm.EgmPlanned planned_;
    public bool HasPlanned {
      get { return hasPlanned; }
    }
    public global::abb.egm.EgmPlanned Planned {
      get { return planned_ ?? global::abb.egm.EgmPlanned.DefaultInstance; }
    }
    
    public const int SpeedRefFieldNumber = 3;
    private bool hasSpeedRef;
    private global::abb.egm.EgmSpeedRef speedRef_;
    public bool HasSpeedRef {
      get { return hasSpeedRef; }
    }
    public global::abb.egm.EgmSpeedRef SpeedRef {
      get { return speedRef_ ?? global::abb.egm.EgmSpeedRef.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasPlanned) {
          if (!Planned.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _egmSensorFieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[0], Header);
      }
      if (hasPlanned) {
        output.WriteMessage(2, field_names[1], Planned);
      }
      if (hasSpeedRef) {
        output.WriteMessage(3, field_names[2], SpeedRef);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasHeader) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
      }
      if (hasPlanned) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Planned);
      }
      if (hasSpeedRef) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, SpeedRef);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static EgmSensor ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmSensor ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmSensor ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmSensor ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmSensor ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmSensor ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EgmSensor ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EgmSensor ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EgmSensor ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmSensor ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EgmSensor MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EgmSensor prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EgmSensor, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EgmSensor cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EgmSensor result;
      
      private EgmSensor PrepareBuilder() {
        if (resultIsReadOnly) {
          EgmSensor original = result;
          result = new EgmSensor();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EgmSensor MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::abb.egm.EgmSensor.Descriptor; }
      }
      
      public override EgmSensor DefaultInstanceForType {
        get { return global::abb.egm.EgmSensor.DefaultInstance; }
      }
      
      public override EgmSensor BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EgmSensor) {
          return MergeFrom((EgmSensor) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EgmSensor other) {
        if (other == global::abb.egm.EgmSensor.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.HasPlanned) {
          MergePlanned(other.Planned);
        }
        if (other.HasSpeedRef) {
          MergeSpeedRef(other.SpeedRef);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_egmSensorFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _egmSensorFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::abb.egm.EgmHeader.Builder subBuilder = global::abb.egm.EgmHeader.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::abb.egm.EgmPlanned.Builder subBuilder = global::abb.egm.EgmPlanned.CreateBuilder();
              if (result.hasPlanned) {
                subBuilder.MergeFrom(Planned);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Planned = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::abb.egm.EgmSpeedRef.Builder subBuilder = global::abb.egm.EgmSpeedRef.CreateBuilder();
              if (result.hasSpeedRef) {
                subBuilder.MergeFrom(SpeedRef);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SpeedRef = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::abb.egm.EgmHeader Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::abb.egm.EgmHeader value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::abb.egm.EgmHeader.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::abb.egm.EgmHeader value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::abb.egm.EgmHeader.DefaultInstance) {
            result.header_ = global::abb.egm.EgmHeader.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public bool HasPlanned {
       get { return result.hasPlanned; }
      }
      public global::abb.egm.EgmPlanned Planned {
        get { return result.Planned; }
        set { SetPlanned(value); }
      }
      public Builder SetPlanned(global::abb.egm.EgmPlanned value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlanned = true;
        result.planned_ = value;
        return this;
      }
      public Builder SetPlanned(global::abb.egm.EgmPlanned.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPlanned = true;
        result.planned_ = builderForValue.Build();
        return this;
      }
      public Builder MergePlanned(global::abb.egm.EgmPlanned value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPlanned &&
            result.planned_ != global::abb.egm.EgmPlanned.DefaultInstance) {
            result.planned_ = global::abb.egm.EgmPlanned.CreateBuilder(result.planned_).MergeFrom(value).BuildPartial();
        } else {
          result.planned_ = value;
        }
        result.hasPlanned = true;
        return this;
      }
      public Builder ClearPlanned() {
        PrepareBuilder();
        result.hasPlanned = false;
        result.planned_ = null;
        return this;
      }
      
      public bool HasSpeedRef {
       get { return result.hasSpeedRef; }
      }
      public global::abb.egm.EgmSpeedRef SpeedRef {
        get { return result.SpeedRef; }
        set { SetSpeedRef(value); }
      }
      public Builder SetSpeedRef(global::abb.egm.EgmSpeedRef value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSpeedRef = true;
        result.speedRef_ = value;
        return this;
      }
      public Builder SetSpeedRef(global::abb.egm.EgmSpeedRef.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSpeedRef = true;
        result.speedRef_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSpeedRef(global::abb.egm.EgmSpeedRef value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSpeedRef &&
            result.speedRef_ != global::abb.egm.EgmSpeedRef.DefaultInstance) {
            result.speedRef_ = global::abb.egm.EgmSpeedRef.CreateBuilder(result.speedRef_).MergeFrom(value).BuildPartial();
        } else {
          result.speedRef_ = value;
        }
        result.hasSpeedRef = true;
        return this;
      }
      public Builder ClearSpeedRef() {
        PrepareBuilder();
        result.hasSpeedRef = false;
        result.speedRef_ = null;
        return this;
      }
    }
    static EgmSensor() {
      object.ReferenceEquals(global::abb.egm.Egm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EgmSensorPathCorr : pb::GeneratedMessage<EgmSensorPathCorr, EgmSensorPathCorr.Builder> {
    private EgmSensorPathCorr() { }
    private static readonly EgmSensorPathCorr defaultInstance = new EgmSensorPathCorr().MakeReadOnly();
    private static readonly string[] _egmSensorPathCorrFieldNames = new string[] { "header", "pathCorr" };
    private static readonly uint[] _egmSensorPathCorrFieldTags = new uint[] { 10, 18 };
    public static EgmSensorPathCorr DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EgmSensorPathCorr DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EgmSensorPathCorr ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmSensorPathCorr__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EgmSensorPathCorr, EgmSensorPathCorr.Builder> InternalFieldAccessors {
      get { return global::abb.egm.Egm.internal__static_abb_egm_EgmSensorPathCorr__FieldAccessorTable; }
    }
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::abb.egm.EgmHeader header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::abb.egm.EgmHeader Header {
      get { return header_ ?? global::abb.egm.EgmHeader.DefaultInstance; }
    }
    
    public const int PathCorrFieldNumber = 2;
    private bool hasPathCorr;
    private global::abb.egm.EgmPathCorr pathCorr_;
    public bool HasPathCorr {
      get { return hasPathCorr; }
    }
    public global::abb.egm.EgmPathCorr PathCorr {
      get { return pathCorr_ ?? global::abb.egm.EgmPathCorr.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasPathCorr) {
          if (!PathCorr.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _egmSensorPathCorrFieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[0], Header);
      }
      if (hasPathCorr) {
        output.WriteMessage(2, field_names[1], PathCorr);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasHeader) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
      }
      if (hasPathCorr) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, PathCorr);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static EgmSensorPathCorr ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmSensorPathCorr ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmSensorPathCorr ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EgmSensorPathCorr ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EgmSensorPathCorr ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmSensorPathCorr ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EgmSensorPathCorr ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EgmSensorPathCorr ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EgmSensorPathCorr ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EgmSensorPathCorr ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EgmSensorPathCorr MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EgmSensorPathCorr prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EgmSensorPathCorr, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EgmSensorPathCorr cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EgmSensorPathCorr result;
      
      private EgmSensorPathCorr PrepareBuilder() {
        if (resultIsReadOnly) {
          EgmSensorPathCorr original = result;
          result = new EgmSensorPathCorr();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EgmSensorPathCorr MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::abb.egm.EgmSensorPathCorr.Descriptor; }
      }
      
      public override EgmSensorPathCorr DefaultInstanceForType {
        get { return global::abb.egm.EgmSensorPathCorr.DefaultInstance; }
      }
      
      public override EgmSensorPathCorr BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EgmSensorPathCorr) {
          return MergeFrom((EgmSensorPathCorr) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EgmSensorPathCorr other) {
        if (other == global::abb.egm.EgmSensorPathCorr.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.HasPathCorr) {
          MergePathCorr(other.PathCorr);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_egmSensorPathCorrFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _egmSensorPathCorrFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::abb.egm.EgmHeader.Builder subBuilder = global::abb.egm.EgmHeader.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::abb.egm.EgmPathCorr.Builder subBuilder = global::abb.egm.EgmPathCorr.CreateBuilder();
              if (result.hasPathCorr) {
                subBuilder.MergeFrom(PathCorr);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PathCorr = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::abb.egm.EgmHeader Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::abb.egm.EgmHeader value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::abb.egm.EgmHeader.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::abb.egm.EgmHeader value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::abb.egm.EgmHeader.DefaultInstance) {
            result.header_ = global::abb.egm.EgmHeader.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public bool HasPathCorr {
       get { return result.hasPathCorr; }
      }
      public global::abb.egm.EgmPathCorr PathCorr {
        get { return result.PathCorr; }
        set { SetPathCorr(value); }
      }
      public Builder SetPathCorr(global::abb.egm.EgmPathCorr value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPathCorr = true;
        result.pathCorr_ = value;
        return this;
      }
      public Builder SetPathCorr(global::abb.egm.EgmPathCorr.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPathCorr = true;
        result.pathCorr_ = builderForValue.Build();
        return this;
      }
      public Builder MergePathCorr(global::abb.egm.EgmPathCorr value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPathCorr &&
            result.pathCorr_ != global::abb.egm.EgmPathCorr.DefaultInstance) {
            result.pathCorr_ = global::abb.egm.EgmPathCorr.CreateBuilder(result.pathCorr_).MergeFrom(value).BuildPartial();
        } else {
          result.pathCorr_ = value;
        }
        result.hasPathCorr = true;
        return this;
      }
      public Builder ClearPathCorr() {
        PrepareBuilder();
        result.hasPathCorr = false;
        result.pathCorr_ = null;
        return this;
      }
    }
    static EgmSensorPathCorr() {
      object.ReferenceEquals(global::abb.egm.Egm.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
